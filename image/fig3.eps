%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig3.pdf
%%Creator: Adobe Acrobat 11.0.10
%%For: Administrator
%%CreationDate: 2015/11/3 ÐÇÆÚ¶þ, ÉÏÎç 10:00:08
%%BoundingBox: 0 0 376 182
%%HiResBoundingBox: 0 0 375.5573 181.1400
%%CropBox: 0 0 375.5573 181.1400
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 947 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2015-11-03T09:58:56+08:00"
   xmp:CreatorTool="MicrosoftÂ® VisioÂ® 2013"
   xmp:ModifyDate="2015-11-03T09:58:56+08:00"
   pdf:Keywords=""
   pdf:Producer="MicrosoftÂ® VisioÂ® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>sl yang</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -181.14 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 181.14 li
375.557 181.14 li
375.557 0 li
cp
clp
gsave
-.580193 181.171 mo
376.42 181.171 li
376.42 -.829436 li
-.580193 -.829436 li
-.580193 181.171 li
clp
3.3198 177.981 mo
305.21 177.981 li
305.21 2.23062 li
3.3198 2.23062 li
3.3198 177.981 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
3.3198 177.981 mo
305.21 177.981 li
305.21 2.23059 li
3.3198 2.23059 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
138.67 127.311 mo
138.67 102.261 158.98 81.9606 184.03 81.9606 cv
209.08 81.9606 229.38 102.261 229.38 127.311 cv
229.38 152.361 209.08 172.671 184.03 172.671 cv
158.98 172.671 138.67 152.361 138.67 127.311 cv
1 /0 /CSD get_res sepcs
0 sep
ef
138.516 122.778 mo
138.591 122.022 138.684 121.271 138.794 120.526 cv
138.825 120.321 139.016 120.179 139.221 120.21 cv
139.426 120.24 139.567 120.431 139.537 120.636 cv
139.428 121.369 139.337 122.108 139.263 122.852 cv
139.243 123.058 139.059 123.209 138.853 123.189 cv
138.647 123.168 138.496 122.985 138.516 122.778 cv
139.184 118.29 mo
139.333 117.545 139.5 116.807 139.685 116.075 cv
139.736 115.875 139.94 115.753 140.141 115.803 cv
140.342 115.854 140.464 116.058 140.413 116.259 cv
140.231 116.978 140.067 117.704 139.92 118.437 cv
139.88 118.64 139.682 118.772 139.479 118.731 cv
139.275 118.691 139.144 118.493 139.184 118.29 cv
140.296 113.889 mo
140.519 113.162 140.76 112.442 141.018 111.731 cv
141.088 111.536 141.303 111.435 141.498 111.506 cv
141.693 111.576 141.794 111.792 141.723 111.987 cv
141.47 112.686 141.233 113.394 141.014 114.109 cv
140.953 114.307 140.743 114.419 140.545 114.358 cv
140.347 114.297 140.235 114.087 140.296 113.889 cv
141.846 109.612 mo
142.14 108.912 142.451 108.22 142.779 107.538 cv
142.869 107.351 143.093 107.273 143.28 107.363 cv
143.467 107.452 143.546 107.677 143.456 107.863 cv
143.134 108.534 142.828 109.214 142.538 109.903 cv
142.458 110.094 142.238 110.184 142.047 110.104 cv
141.855 110.023 141.766 109.803 141.846 109.612 cv
143.814 105.514 mo
144.177 104.848 144.555 104.191 144.949 103.545 cv
145.057 103.368 145.288 103.312 145.465 103.42 cv
145.642 103.528 145.698 103.759 145.59 103.936 cv
145.202 104.571 144.83 105.217 144.474 105.873 cv
144.375 106.055 144.147 106.122 143.965 106.023 cv
143.783 105.924 143.715 105.697 143.814 105.514 cv
146.179 101.635 mo
146.605 101.008 147.047 100.393 147.503 99.7885 cv
147.628 99.6231 147.863 99.5903 148.028 99.7152 cv
148.194 99.8401 148.227 100.075 148.102 100.241 cv
147.653 100.835 147.219 101.44 146.8 102.057 cv
146.684 102.228 146.45 102.273 146.279 102.156 cv
146.107 102.04 146.063 101.806 146.179 101.635 cv
148.916 98.0105 mo
149.401 97.4294 149.901 96.8607 150.414 96.3047 cv
150.555 96.1523 150.792 96.1429 150.945 96.2834 cv
151.097 96.4241 151.106 96.6616 150.966 96.8139 cv
150.461 97.3609 149.969 97.9203 149.492 98.4918 cv
149.359 98.6509 149.122 98.6721 148.963 98.5392 cv
148.804 98.4063 148.783 98.1695 148.916 98.0105 cv
151.995 94.6752 mo
152.535 94.1454 153.088 93.6288 153.653 93.1261 cv
153.808 92.9884 154.046 93.0022 154.183 93.1572 cv
154.321 93.3122 154.307 93.5495 154.152 93.6872 cv
153.596 94.1818 153.052 94.6899 152.521 95.2111 cv
152.373 95.3563 152.135 95.354 151.99 95.2061 cv
151.845 95.0581 151.847 94.8204 151.995 94.6752 cv
155.386 91.6609 mo
155.975 91.1873 156.576 90.7279 157.189 90.2833 cv
157.356 90.1617 157.591 90.1989 157.713 90.3667 cv
157.835 90.5345 157.797 90.7692 157.63 90.891 cv
157.027 91.3282 156.436 91.78 155.857 92.246 cv
155.695 92.3759 155.459 92.3502 155.329 92.1887 cv
155.199 92.0271 155.224 91.7908 155.386 91.6609 cv
159.056 88.997 mo
159.689 88.5842 160.332 88.1867 160.985 87.8049 cv
161.164 87.7003 161.394 87.7606 161.499 87.9396 cv
161.603 88.1186 161.543 88.3486 161.364 88.4531 cv
160.721 88.8287 160.089 89.2196 159.467 89.6256 cv
159.293 89.7389 159.061 89.6901 158.947 89.5165 cv
158.834 89.343 158.883 89.1104 159.056 88.997 cv
162.97 86.7103 mo
163.639 86.3627 164.318 86.0311 165.006 85.7159 cv
165.195 85.6296 165.418 85.7125 165.504 85.901 cv
165.59 86.0895 165.507 86.3123 165.319 86.3986 cv
164.642 86.7084 163.975 87.0346 163.316 87.3765 cv
163.132 87.4721 162.906 87.4005 162.81 87.2165 cv
162.714 87.0325 162.786 86.8058 162.97 86.7103 cv
167.089 84.8245 mo
167.79 84.5449 168.5 84.2819 169.218 84.0364 cv
169.414 83.9693 169.627 84.074 169.694 84.2702 cv
169.761 84.4664 169.657 84.6797 169.461 84.7468 cv
168.755 84.9883 168.057 85.2468 167.367 85.5219 cv
167.174 85.5987 166.956 85.5048 166.879 85.3123 cv
166.802 85.1197 166.896 84.9013 167.089 84.8245 cv
171.383 83.3558 mo
172.108 83.1476 172.841 82.9569 173.58 82.7843 cv
173.782 82.7371 173.984 82.8625 174.031 83.0643 cv
174.078 83.2662 173.953 83.4681 173.751 83.5152 cv
173.024 83.6851 172.304 83.8727 171.59 84.0774 cv
171.391 84.1346 171.183 84.0195 171.126 83.8202 cv
171.069 83.6209 171.184 83.413 171.383 83.3558 cv
175.803 82.3231 mo
176.544 82.1884 177.292 82.0716 178.045 81.9732 cv
178.251 81.9464 178.439 82.0912 178.466 82.2967 cv
178.493 82.5023 178.348 82.6906 178.143 82.7175 cv
177.402 82.8145 176.666 82.9292 175.937 83.0617 cv
175.733 83.0988 175.538 82.9634 175.501 82.7594 cv
175.464 82.5555 175.599 82.3601 175.803 82.3231 cv
180.302 81.7349 mo
181.053 81.6744 181.808 81.6321 182.569 81.6082 cv
182.776 81.6016 182.949 81.7644 182.956 81.9715 cv
182.962 82.1787 182.799 82.352 182.592 82.3586 cv
181.844 82.382 181.101 82.4238 180.363 82.4832 cv
180.156 82.4999 179.975 82.3459 179.958 82.1392 cv
179.942 81.9326 180.096 81.7516 180.302 81.7349 cv
184.839 81.5923 mo
185.599 81.6054 186.355 81.6372 187.106 81.6871 cv
187.313 81.7008 187.47 81.8796 187.456 82.0865 cv
187.442 82.2934 187.263 82.4499 187.056 82.4362 cv
186.318 82.3871 185.574 82.3558 184.826 82.3429 cv
184.618 82.3393 184.453 82.1683 184.457 81.961 cv
184.46 81.7537 184.631 81.5887 184.839 81.5922 cv
184.839 81.5923 li
189.366 81.8932 mo
190.121 81.981 190.871 82.087 191.614 82.2111 cv
191.818 82.2452 191.956 82.4387 191.922 82.6431 cv
191.888 82.8477 191.695 82.9857 191.49 82.9516 cv
190.759 82.8296 190.022 82.7253 189.28 82.6389 cv
189.074 82.6151 188.926 82.4286 188.95 82.2228 cv
188.974 82.0169 189.16 81.8693 189.366 81.8932 cv
193.843 82.6404 mo
194.585 82.8025 195.32 82.9827 196.048 83.1805 cv
196.248 83.2348 196.366 83.441 196.312 83.641 cv
196.257 83.8412 196.051 83.9593 195.851 83.9049 cv
195.135 83.7105 194.412 83.5333 193.683 83.3738 cv
193.48 83.3296 193.352 83.1295 193.396 82.927 cv
193.44 82.7244 193.64 82.5961 193.843 82.6404 cv
198.223 83.8301 mo
198.946 84.0659 199.661 84.3192 200.368 84.5895 cv
200.561 84.6637 200.658 84.8807 200.584 85.0742 cv
200.51 85.2679 200.293 85.3649 200.1 85.2907 cv
199.405 85.0249 198.701 84.7757 197.99 84.5438 cv
197.793 84.4796 197.685 84.2677 197.75 84.0706 cv
197.814 83.8735 198.026 83.7658 198.223 83.8301 cv
202.471 85.4553 mo
203.166 85.7618 203.852 86.085 204.528 86.4247 cv
204.713 86.5178 204.788 86.7434 204.695 86.9286 cv
204.602 87.1139 204.376 87.1887 204.191 87.0956 cv
203.526 86.7615 202.852 86.4436 202.168 86.1421 cv
201.979 86.0584 201.893 85.8369 201.976 85.6472 cv
202.06 85.4575 202.282 85.3716 202.471 85.4553 cv
206.533 87.4952 mo
207.193 87.8691 207.843 88.2587 208.482 88.6639 cv
208.658 88.7749 208.709 89.0068 208.598 89.182 cv
208.487 89.3571 208.255 89.409 208.08 89.2979 cv
207.452 88.8995 206.813 88.5162 206.163 88.1485 cv
205.983 88.0464 205.92 87.8172 206.022 87.6369 cv
206.124 87.4565 206.353 87.3931 206.533 87.4952 cv
210.37 89.9276 mo
210.99 90.3645 211.597 90.8165 212.193 91.2829 cv
212.356 91.4108 212.385 91.6467 212.257 91.8099 cv
212.13 91.9733 211.894 92.0019 211.73 91.8741 cv
211.144 91.4154 210.547 90.9708 209.938 90.541 cv
209.768 90.4215 209.728 90.1872 209.847 90.0178 cv
209.967 89.8484 210.201 89.8081 210.37 89.9276 cv
213.946 92.7265 mo
214.519 93.2221 215.079 93.7315 215.626 94.2545 cv
215.775 94.3978 215.781 94.6354 215.638 94.7852 cv
215.494 94.935 215.257 94.9404 215.107 94.7971 cv
214.569 94.2827 214.018 93.7815 213.455 93.2941 cv
213.298 93.1584 213.281 92.9214 213.417 92.7646 cv
213.552 92.6078 213.789 92.5907 213.946 92.7265 cv
217.227 95.8631 mo
217.747 96.4122 218.254 96.9741 218.747 97.5485 cv
218.882 97.7059 218.864 97.9428 218.707 98.0778 cv
218.549 98.2128 218.312 98.1947 218.177 98.0374 cv
217.692 97.4724 217.194 96.9197 216.682 96.3796 cv
216.54 96.229 216.546 95.9915 216.696 95.8489 cv
216.847 95.7063 217.085 95.7126 217.227 95.8631 cv
220.181 99.3063 mo
220.645 99.9035 221.093 100.512 221.527 101.133 cv
221.646 101.302 221.604 101.536 221.435 101.655 cv
221.265 101.774 221.031 101.733 220.912 101.563 cv
220.485 100.953 220.044 100.354 219.588 99.7666 cv
219.461 99.6027 219.491 99.3669 219.655 99.2398 cv
219.819 99.1128 220.054 99.1426 220.181 99.3063 cv
222.78 103.023 mo
223.182 103.662 223.568 104.312 223.938 104.972 cv
224.04 105.153 223.975 105.382 223.794 105.483 cv
223.614 105.584 223.385 105.52 223.283 105.339 cv
222.919 104.69 222.54 104.051 222.145 103.422 cv
222.034 103.246 222.087 103.015 222.263 102.904 cv
222.438 102.794 222.67 102.847 222.78 103.023 cv
222.78 103.023 li
224.997 106.976 mo
225.333 107.651 225.652 108.335 225.955 109.029 cv
226.038 109.219 225.951 109.44 225.762 109.523 cv
225.572 109.606 225.35 109.519 225.267 109.329 cv
224.969 108.647 224.655 107.974 224.325 107.31 cv
224.233 107.124 224.309 106.899 224.494 106.807 cv
224.68 106.714 224.905 106.79 224.997 106.976 cv
226.809 111.127 mo
227.077 111.833 227.327 112.547 227.559 113.269 cv
227.623 113.467 227.515 113.678 227.317 113.742 cv
227.12 113.805 226.909 113.697 226.845 113.5 cv
226.616 112.789 226.37 112.087 226.107 111.392 cv
226.034 111.198 226.132 110.982 226.325 110.908 cv
226.519 110.835 226.736 110.933 226.809 111.127 cv
226.809 111.127 li
228.201 115.447 mo
228.397 116.175 228.574 116.911 228.734 117.653 cv
228.777 117.856 228.648 118.055 228.446 118.099 cv
228.243 118.143 228.043 118.014 228 117.811 cv
227.843 117.081 227.668 116.357 227.476 115.641 cv
227.423 115.441 227.541 115.235 227.742 115.181 cv
227.942 115.127 228.148 115.246 228.201 115.447 cv
229.155 119.884 mo
229.277 120.627 229.38 121.377 229.465 122.132 cv
229.488 122.338 229.34 122.524 229.134 122.547 cv
228.928 122.57 228.742 122.422 228.719 122.216 cv
228.635 121.473 228.534 120.736 228.414 120.005 cv
228.381 119.8 228.52 119.607 228.724 119.574 cv
228.929 119.54 229.122 119.679 229.155 119.884 cv
229.664 124.393 mo
229.711 125.144 229.74 125.9 229.751 126.661 cv
229.753 126.868 229.588 127.039 229.381 127.042 cv
229.173 127.045 229.003 126.879 229 126.672 cv
228.99 125.923 228.961 125.179 228.914 124.44 cv
228.901 124.233 229.058 124.055 229.265 124.042 cv
229.472 124.029 229.651 124.186 229.664 124.393 cv
229.664 124.393 li
229.727 128.931 mo
229.701 129.691 229.656 130.446 229.592 131.196 cv
229.575 131.403 229.394 131.556 229.187 131.539 cv
228.98 131.521 228.827 131.34 228.844 131.133 cv
228.906 130.395 228.951 129.652 228.977 128.905 cv
228.984 128.697 229.158 128.535 229.365 128.542 cv
229.572 128.55 229.734 128.723 229.727 128.931 cv
229.346 133.453 mo
229.245 134.206 229.126 134.953 228.989 135.694 cv
228.951 135.898 228.755 136.033 228.551 135.995 cv
228.347 135.957 228.213 135.761 228.25 135.557 cv
228.385 134.829 228.503 134.094 228.602 133.353 cv
228.63 133.147 228.819 133.003 229.024 133.031 cv
229.23 133.058 229.374 133.247 229.346 133.453 cv
228.52 137.915 mo
228.344 138.654 228.151 139.386 227.94 140.11 cv
227.883 140.309 227.674 140.424 227.475 140.366 cv
227.276 140.308 227.162 140.1 227.22 139.9 cv
227.427 139.188 227.617 138.468 227.789 137.742 cv
227.837 137.54 228.039 137.415 228.241 137.463 cv
228.443 137.511 228.568 137.713 228.52 137.915 cv
227.252 142.273 mo
227.004 142.992 226.738 143.702 226.455 144.404 cv
226.377 144.596 226.158 144.689 225.966 144.612 cv
225.774 144.534 225.681 144.316 225.758 144.123 cv
226.036 143.433 226.298 142.735 226.543 142.028 cv
226.61 141.832 226.824 141.728 227.02 141.796 cv
227.216 141.864 227.32 142.077 227.252 142.273 cv
225.552 146.492 mo
225.233 147.181 224.898 147.861 224.546 148.531 cv
224.45 148.714 224.223 148.785 224.039 148.689 cv
223.856 148.592 223.785 148.366 223.881 148.182 cv
224.227 147.523 224.557 146.854 224.87 146.176 cv
224.957 145.988 225.181 145.906 225.369 145.993 cv
225.557 146.08 225.639 146.303 225.552 146.492 cv
225.552 146.492 li
223.441 150.517 mo
223.055 151.17 222.654 151.813 222.238 152.445 cv
222.124 152.618 221.891 152.666 221.718 152.552 cv
221.545 152.438 221.497 152.205 221.611 152.032 cv
222.021 151.41 222.415 150.778 222.794 150.135 cv
222.899 149.957 223.129 149.897 223.308 150.003 cv
223.487 150.108 223.546 150.338 223.441 150.517 cv
223.441 150.517 li
220.942 154.31 mo
220.494 154.921 220.032 155.521 219.555 156.109 cv
219.424 156.27 219.188 156.294 219.027 156.164 cv
218.866 156.033 218.841 155.797 218.972 155.636 cv
219.441 155.058 219.896 154.468 220.336 153.867 cv
220.458 153.699 220.693 153.663 220.86 153.785 cv
221.028 153.908 221.064 154.143 220.942 154.31 cv
220.942 154.31 li
218.081 157.836 mo
217.576 158.4 217.057 158.951 216.524 159.489 cv
216.378 159.636 216.141 159.637 215.993 159.491 cv
215.846 159.345 215.845 159.108 215.991 158.961 cv
216.514 158.432 217.025 157.889 217.522 157.335 cv
217.66 157.181 217.898 157.168 218.052 157.306 cv
218.206 157.445 218.219 157.682 218.081 157.836 cv
214.888 161.062 mo
214.33 161.573 213.76 162.069 213.177 162.552 cv
213.017 162.684 212.781 162.662 212.648 162.503 cv
212.516 162.343 212.538 162.106 212.698 161.974 cv
213.271 161.499 213.832 161.01 214.381 160.508 cv
214.534 160.368 214.772 160.379 214.912 160.531 cv
215.052 160.684 215.041 160.922 214.888 161.062 cv
211.394 163.956 mo
210.79 164.409 210.173 164.847 209.545 165.27 cv
209.373 165.385 209.14 165.34 209.024 165.168 cv
208.908 164.996 208.954 164.763 209.126 164.647 cv
209.743 164.231 210.35 163.8 210.945 163.355 cv
211.111 163.231 211.346 163.264 211.47 163.43 cv
211.594 163.596 211.56 163.832 211.394 163.956 cv
207.634 166.49 mo
206.988 166.88 206.331 167.255 205.665 167.613 cv
205.482 167.711 205.255 167.643 205.156 167.46 cv
205.058 167.278 205.127 167.05 205.309 166.952 cv
205.965 166.599 206.61 166.231 207.246 165.847 cv
207.423 165.74 207.654 165.797 207.761 165.974 cv
207.868 166.152 207.811 166.382 207.634 166.49 cv
207.634 166.49 li
203.643 168.637 mo
202.963 168.961 202.273 169.268 201.574 169.559 cv
201.382 169.639 201.163 169.548 201.083 169.356 cv
201.003 169.165 201.094 168.945 201.286 168.866 cv
201.973 168.58 202.651 168.278 203.321 167.959 cv
203.508 167.87 203.732 167.95 203.821 168.137 cv
203.91 168.324 203.83 168.548 203.643 168.637 cv
199.462 170.376 mo
198.751 170.631 198.033 170.868 197.306 171.088 cv
197.108 171.149 196.898 171.037 196.838 170.838 cv
196.778 170.64 196.89 170.43 197.089 170.37 cv
197.803 170.154 198.51 169.92 199.208 169.669 cv
199.404 169.599 199.619 169.701 199.689 169.896 cv
199.758 170.091 199.657 170.306 199.462 170.376 cv
195.118 171.692 mo
194.386 171.874 193.648 172.039 192.903 172.186 cv
192.699 172.226 192.502 172.093 192.462 171.89 cv
192.422 171.686 192.554 171.489 192.758 171.449 cv
193.491 171.305 194.217 171.143 194.937 170.964 cv
195.138 170.914 195.342 171.036 195.392 171.237 cv
195.442 171.438 195.319 171.642 195.118 171.692 cv
190.665 172.568 mo
189.92 172.676 189.168 172.767 188.412 172.839 cv
188.205 172.858 188.022 172.707 188.002 172.501 cv
187.983 172.294 188.134 172.111 188.341 172.091 cv
189.085 172.02 189.824 171.932 190.557 171.825 cv
190.762 171.795 190.953 171.937 190.983 172.143 cv
191.012 172.348 190.87 172.538 190.665 172.568 cv
190.665 172.568 li
186.148 172.998 mo
185.446 173.03 184.74 173.046 184.03 173.046 cv
183.878 173.046 li
183.671 173.045 183.503 172.877 183.504 172.669 cv
183.505 172.462 183.673 172.294 183.881 172.295 cv
184.03 172.295 li
184.728 172.295 185.423 172.279 186.113 172.248 cv
186.321 172.238 186.496 172.399 186.506 172.606 cv
186.515 172.813 186.355 172.988 186.148 172.998 cv
181.61 172.983 mo
180.85 172.943 180.096 172.885 179.347 172.809 cv
179.14 172.788 178.99 172.604 179.011 172.398 cv
179.032 172.191 179.216 172.041 179.423 172.062 cv
180.159 172.137 180.902 172.194 181.649 172.233 cv
181.856 172.244 182.015 172.421 182.004 172.628 cv
181.993 172.835 181.817 172.994 181.61 172.983 cv
177.095 172.523 mo
176.344 172.409 175.599 172.277 174.86 172.126 cv
174.657 172.085 174.526 171.887 174.567 171.684 cv
174.608 171.48 174.807 171.349 175.01 171.391 cv
175.736 171.539 176.469 171.669 177.208 171.781 cv
177.413 171.812 177.554 172.004 177.523 172.209 cv
177.491 172.414 177.3 172.555 177.095 172.523 cv
172.648 171.618 mo
171.912 171.43 171.184 171.223 170.463 171 cv
170.265 170.938 170.155 170.728 170.216 170.53 cv
170.277 170.332 170.488 170.221 170.686 170.283 cv
171.394 170.503 172.111 170.706 172.834 170.891 cv
173.035 170.942 173.156 171.147 173.104 171.348 cv
173.053 171.548 172.848 171.67 172.648 171.618 cv
168.307 170.271 mo
167.594 170.01 166.888 169.731 166.192 169.436 cv
166.001 169.355 165.912 169.135 165.993 168.944 cv
166.073 168.753 166.294 168.664 166.485 168.745 cv
167.17 169.035 167.864 169.309 168.566 169.566 cv
168.76 169.638 168.86 169.853 168.789 170.048 cv
168.718 170.243 168.502 170.343 168.307 170.271 cv
168.307 170.271 li
164.121 168.496 mo
163.438 168.165 162.764 167.818 162.1 167.455 cv
161.918 167.355 161.852 167.127 161.951 166.945 cv
162.051 166.763 162.279 166.696 162.461 166.796 cv
163.114 167.153 163.776 167.495 164.448 167.821 cv
164.635 167.911 164.713 168.136 164.622 168.322 cv
164.532 168.509 164.307 168.587 164.121 168.496 cv
160.134 166.314 mo
159.488 165.917 158.853 165.505 158.228 165.077 cv
158.057 164.96 158.013 164.727 158.13 164.556 cv
158.248 164.385 158.481 164.341 158.652 164.458 cv
159.267 164.878 159.892 165.284 160.527 165.674 cv
160.704 165.783 160.759 166.014 160.651 166.191 cv
160.542 166.367 160.311 166.422 160.134 166.314 cv
156.386 163.748 mo
155.783 163.29 155.192 162.817 154.612 162.33 cv
154.454 162.197 154.433 161.96 154.567 161.801 cv
154.7 161.643 154.937 161.622 155.096 161.755 cv
155.665 162.235 156.247 162.7 156.84 163.151 cv
157.005 163.276 157.038 163.511 156.912 163.677 cv
156.787 163.842 156.551 163.874 156.386 163.748 cv
152.911 160.826 mo
152.357 160.311 151.815 159.783 151.287 159.241 cv
151.142 159.092 151.145 158.855 151.293 158.71 cv
151.442 158.565 151.679 158.568 151.824 158.717 cv
152.344 159.249 152.877 159.77 153.422 160.276 cv
153.574 160.417 153.583 160.655 153.442 160.807 cv
153.301 160.959 153.063 160.967 152.911 160.826 cv
149.743 157.577 mo
149.242 157.011 148.755 156.431 148.283 155.84 cv
148.153 155.678 148.18 155.442 148.342 155.313 cv
148.504 155.183 148.74 155.21 148.869 155.372 cv
149.334 155.953 149.813 156.523 150.305 157.08 cv
150.442 157.236 150.428 157.473 150.272 157.61 cv
150.117 157.748 149.88 157.733 149.743 157.577 cv
146.911 154.034 mo
146.469 153.421 146.042 152.797 145.63 152.162 cv
145.517 151.988 145.567 151.756 145.74 151.643 cv
145.914 151.53 146.147 151.58 146.26 151.754 cv
146.665 152.378 147.085 152.992 147.519 153.595 cv
147.641 153.763 147.603 153.997 147.435 154.119 cv
147.266 154.24 147.032 154.202 146.911 154.034 cv
144.444 150.23 mo
144.065 149.577 143.702 148.914 143.355 148.241 cv
143.26 148.057 143.332 147.831 143.517 147.736 cv
143.701 147.641 143.927 147.713 144.022 147.897 cv
144.363 148.559 144.72 149.211 145.093 149.853 cv
145.197 150.032 145.136 150.262 144.957 150.366 cv
144.777 150.47 144.548 150.409 144.444 150.23 cv
144.444 150.23 li
142.367 146.202 mo
142.055 145.516 141.76 144.821 141.482 144.117 cv
141.406 143.924 141.5 143.706 141.693 143.63 cv
141.886 143.554 142.104 143.648 142.18 143.841 cv
142.454 144.533 142.744 145.217 143.05 145.892 cv
143.136 146.08 143.053 146.303 142.864 146.389 cv
142.675 146.474 142.453 146.391 142.367 146.202 cv
140.7 141.986 mo
140.458 141.271 140.233 140.548 140.026 139.818 cv
139.969 139.619 140.085 139.411 140.285 139.355 cv
140.484 139.298 140.692 139.414 140.748 139.613 cv
140.952 140.331 141.173 141.042 141.411 141.745 cv
141.478 141.941 141.372 142.154 141.176 142.221 cv
140.98 142.287 140.767 142.182 140.7 141.986 cv
139.461 137.62 mo
139.292 136.885 139.14 136.144 139.007 135.396 cv
138.971 135.192 139.107 134.997 139.311 134.96 cv
139.515 134.924 139.71 135.06 139.746 135.264 cv
139.877 135.999 140.026 136.729 140.193 137.451 cv
140.239 137.653 140.113 137.855 139.911 137.901 cv
139.709 137.948 139.508 137.822 139.461 137.62 cv
138.664 133.152 mo
138.569 132.405 138.492 131.652 138.433 130.894 cv
138.417 130.688 138.571 130.507 138.778 130.491 cv
138.985 130.475 139.165 130.63 139.181 130.836 cv
139.239 131.582 139.315 132.322 139.409 133.057 cv
139.435 133.263 139.29 133.451 139.084 133.477 cv
138.878 133.503 138.69 133.358 138.664 133.152 cv
138.313 128.628 mo
138.301 128.19 138.294 127.751 138.294 127.311 cv
138.294 126.55 138.313 125.794 138.35 125.042 cv
138.36 124.835 138.536 124.675 138.743 124.685 cv
138.95 124.695 139.11 124.871 139.1 125.079 cv
139.063 125.818 139.045 126.562 139.045 127.311 cv
139.045 127.744 139.051 128.176 139.064 128.606 cv
139.069 128.814 138.906 128.986 138.699 128.992 cv
138.492 128.998 138.319 128.835 138.313 128.628 cv
1 /0 /CSD get_res sepcs
1 sep
f
197.1 98.3306 mo
180.7 89.3406 152.56 96.0405 147.62 113.671 cv
144.63 124.341 150.16 139.031 158.28 147.561 cv
163.48 153.031 169.75 155.981 177 158.421 cv
180.9 159.731 185.09 160.901 189.15 160.971 cv
202.96 161.231 215.39 148.891 218.14 136.181 cv
221.56 120.391 210.04 104.041 197.1 98.3306 cv
/1 
[/DeviceCMYK] /CSA add_res
.109316 .05243 .00643931 0 cmyk
ef
197.1 98.3306 mo
196.919 98.6598 li
192.066 95.9984 186.145 94.7222 180.104 94.7228 cv
173.062 94.722 165.861 96.4568 160.013 99.7102 cv
154.162 102.965 149.676 107.723 147.981 113.772 cv
147.43 115.737 147.173 117.848 147.173 120.038 cv
147.166 129.514 152.023 140.452 158.552 147.302 cv
163.692 152.709 169.892 155.632 177.12 158.065 cv
181.006 159.371 185.164 160.528 189.156 160.595 cv
189.298 160.598 189.438 160.599 189.579 160.599 cv
196.283 160.6 202.66 157.593 207.701 153.017 cv
212.741 148.442 216.433 142.302 217.773 136.101 cv
218.181 134.216 218.374 132.323 218.374 130.44 cv
218.387 116.776 208.187 103.623 196.948 98.6741 cv
196.919 98.6598 li
197.1 98.3306 li
197.251 97.9872 li
208.758 103.076 219.111 116.398 219.124 130.44 cv
219.124 132.374 218.927 134.321 218.507 136.26 cv
217.125 142.637 213.355 148.895 208.205 153.572 cv
203.055 158.248 196.512 161.349 189.579 161.35 cv
189.434 161.35 189.288 161.349 189.143 161.346 cv
185.016 161.274 180.794 160.09 176.88 158.776 cv
169.608 156.329 163.267 153.352 158.008 147.819 cv
151.345 140.812 146.429 129.765 146.422 120.038 cv
146.422 117.789 146.686 115.61 147.258 113.569 cv
149.021 107.28 153.673 102.376 159.648 99.0541 cv
165.626 95.7306 172.939 93.9729 180.104 93.9721 cv
186.249 93.9726 192.289 95.266 197.28 98.0014 cv
197.1 98.3306 li
197.251 97.9872 li
197.1 98.3306 li
1 /0 /CSD get_res sepcs
1 sep
f
19.6198 74.8706 mo
19.6198 47.4706 41.8298 25.2606 69.2298 25.2606 cv
96.6198 25.2606 118.83 47.4706 118.83 74.8706 cv
118.83 102.271 96.6198 124.481 69.2298 124.481 cv
41.8298 124.481 19.6198 102.271 19.6198 74.8706 cv
1 /0 /CSD get_res sepcs
0 sep
ef
19.447 70.3403 mo
19.5149 69.584 19.5997 68.8326 19.701 68.0864 cv
19.7288 67.8809 19.9179 67.737 20.1233 67.7649 cv
20.3288 67.7928 20.4727 67.982 20.4448 68.1873 cv
20.3451 68.9223 20.2616 69.6626 20.1946 70.4074 cv
20.1761 70.614 19.9937 70.7664 19.7872 70.7478 cv
19.5807 70.7293 19.4284 70.5468 19.447 70.3403 cv
20.0569 65.8462 mo
20.193 65.0996 20.3457 64.3589 20.5146 63.6244 cv
20.561 63.4223 20.7624 63.2962 20.9646 63.3426 cv
21.1665 63.389 21.2927 63.5905 21.2463 63.7925 cv
21.0799 64.516 20.9296 65.2455 20.7955 65.9809 cv
20.7582 66.1848 20.5628 66.32 20.3588 66.2827 cv
20.1549 66.2456 20.0197 66.0501 20.0569 65.8462 cv
21.0733 61.4256 mo
21.2767 60.6952 21.4965 59.9713 21.7319 59.2547 cv
21.7967 59.0578 22.0087 58.9506 22.2056 59.0153 cv
22.4027 59.08 22.5098 59.2921 22.4452 59.489 cv
22.2133 60.1949 21.9969 60.9076 21.7965 61.6271 cv
21.7409 61.8269 21.5338 61.9436 21.3342 61.888 cv
21.1344 61.8324 21.0176 61.6254 21.0733 61.4256 cv
22.4912 57.111 mo
22.761 56.4011 23.0465 55.699 23.3475 55.005 cv
23.4299 54.8148 23.6509 54.7275 23.8411 54.8099 cv
24.0313 54.8924 24.1187 55.1134 24.0362 55.3036 cv
23.7398 55.9871 23.4586 56.6785 23.1928 57.3778 cv
23.1191 57.5716 22.9024 57.6689 22.7086 57.5953 cv
22.5148 57.5216 22.4175 57.3047 22.4912 57.111 cv
24.2988 52.9409 mo
24.6321 52.2596 24.9803 51.5868 25.3432 50.9231 cv
25.4425 50.7413 25.6706 50.6744 25.8526 50.7739 cv
26.0345 50.8733 26.1013 51.1014 26.0019 51.2833 cv
25.6445 51.9369 25.3014 52.5995 24.9733 53.2708 cv
24.8823 53.457 24.6574 53.5342 24.4711 53.4431 cv
24.285 53.3521 24.2078 53.1272 24.2988 52.9409 cv
26.478 48.9556 mo
26.8713 48.3079 27.279 47.67 27.7006 47.042 cv
27.8161 46.8699 28.0493 46.8241 28.2215 46.9395 cv
28.3936 47.0551 28.4394 47.2883 28.3239 47.4604 cv
27.9086 48.079 27.507 48.7073 27.1196 49.3453 cv
27.012 49.5225 26.781 49.5789 26.6038 49.4713 cv
26.4266 49.3636 26.3703 49.1328 26.478 48.9556 cv
29.0084 45.1863 mo
29.4585 44.5774 29.922 43.9793 30.3986 43.392 cv
30.5293 43.2312 30.7656 43.2066 30.9267 43.3372 cv
31.0876 43.4679 31.1121 43.7042 30.9815 43.8652 cv
30.5121 44.4436 30.0554 45.0329 29.6122 45.6326 cv
29.4889 45.7993 29.2538 45.8345 29.0871 45.7113 cv
28.9204 45.588 28.8852 45.353 29.0084 45.1863 cv
31.8681 41.663 mo
32.3708 41.0977 32.8862 40.5439 33.4138 40.0022 cv
33.5584 39.8536 33.796 39.8504 33.9445 39.995 cv
34.093 40.1396 34.0962 40.3772 33.9516 40.5258 cv
33.4319 41.0596 32.9243 41.605 32.429 42.1619 cv
32.2913 42.3167 32.054 42.3306 31.899 42.1928 cv
31.7441 42.0551 31.7303 41.8178 31.8681 41.6628 cv
31.8681 41.663 li
35.0324 38.413 mo
35.5835 37.8959 36.1464 37.3911 36.7206 36.899 cv
36.878 36.7641 37.1151 36.7824 37.2499 36.9397 cv
37.3848 37.0972 37.3665 37.3342 37.2092 37.4691 cv
36.6435 37.9538 36.0891 38.451 35.5461 38.9605 cv
35.3949 39.1024 35.1573 39.0949 35.0156 38.9437 cv
34.8737 38.7925 34.8812 38.555 35.0324 38.4132 cv
35.0324 38.413 li
38.4752 35.4628 mo
39.0702 34.9979 39.676 34.546 40.2923 34.1078 cv
40.4611 33.9878 40.6955 34.0273 40.8156 34.1962 cv
40.9358 34.3651 40.8962 34.5995 40.7273 34.7196 cv
40.1203 35.1513 39.5236 35.5964 38.9374 36.0544 cv
38.774 36.1822 38.5381 36.1532 38.4104 35.9898 cv
38.2828 35.8265 38.3118 35.5906 38.4752 35.4628 cv
42.1682 32.8365 mo
42.8023 32.4276 43.446 32.0326 44.0993 31.6518 cv
44.2785 31.5474 44.5083 31.6081 44.6127 31.7872 cv
44.7171 31.9663 44.6565 32.1962 44.4774 32.3006 cv
43.8339 32.6754 43.1997 33.0646 42.5752 33.4675 cv
42.401 33.5798 42.1687 33.5297 42.0562 33.3555 cv
41.9438 33.1812 41.994 32.9489 42.1682 32.8365 cv
46.0817 30.5563 mo
46.7493 30.2068 47.4259 29.872 48.111 29.5522 cv
48.2988 29.4645 48.5222 29.5457 48.6099 29.7336 cv
48.6977 29.9214 48.6165 30.1447 48.4286 30.2325 cv
47.7538 30.5474 47.0875 30.8772 46.4298 31.2215 cv
46.2461 31.3176 46.0193 31.2467 45.9231 31.0629 cv
45.827 30.8792 45.8979 30.6525 46.0817 30.5563 cv
50.1833 28.6418 mo
50.8809 28.3541 51.5865 28.0816 52.2996 27.825 cv
52.4947 27.7548 52.7098 27.8561 52.78 28.0511 cv
52.8502 28.2462 52.7489 28.4612 52.5538 28.5315 cv
51.8516 28.7841 51.1566 29.0525 50.4695 29.3358 cv
50.2778 29.4149 50.0584 29.3236 49.9793 29.132 cv
49.9004 28.9403 49.9916 28.7208 50.1833 28.6418 cv
54.4512 27.1058 mo
55.1717 26.8832 55.8992 26.6764 56.6333 26.4858 cv
56.8339 26.4338 57.0388 26.5541 57.0909 26.7549 cv
57.143 26.9556 57.0226 27.1604 56.8219 27.2124 cv
56.0989 27.4002 55.3825 27.6039 54.6728 27.8231 cv
54.4747 27.8844 54.2645 27.7734 54.2034 27.5753 cv
54.1421 27.3772 54.2531 27.1671 54.4512 27.1058 cv
58.8414 25.9661 mo
59.5786 25.8104 60.3218 25.6707 61.0706 25.5478 cv
61.2753 25.5143 61.4683 25.6529 61.502 25.8575 cv
61.5355 26.062 61.3969 26.2551 61.1923 26.2887 cv
60.4547 26.4097 59.7227 26.5472 58.9966 26.7006 cv
58.7937 26.7435 58.5945 26.6139 58.5517 26.4111 cv
58.5088 26.2083 58.6385 26.0091 58.8414 25.9661 cv
63.3167 25.2313 mo
64.0644 25.1431 64.8171 25.0716 65.5746 25.0168 cv
65.7813 25.0019 65.9611 25.1575 65.976 25.3642 cv
65.991 25.571 65.8354 25.7507 65.6287 25.7656 cv
64.8825 25.8196 64.1411 25.8901 63.4046 25.9769 cv
63.1987 26.0012 63.0121 25.8539 62.9878 25.648 cv
62.9636 25.4422 63.1108 25.2556 63.3167 25.2313 cv
67.8401 24.9042 mo
68.3018 24.8915 68.765 24.8852 69.2298 24.8852 cv
69.5233 24.8852 69.8163 24.8878 70.1086 24.8927 cv
70.3159 24.8964 70.481 25.0673 70.4774 25.2746 cv
70.4739 25.4819 70.3029 25.6471 70.0957 25.6435 cv
69.8076 25.6385 69.5191 25.636 69.2298 25.636 cv
68.7719 25.636 68.3155 25.6423 67.8605 25.6546 cv
67.6534 25.6603 67.4808 25.4968 67.4751 25.2897 cv
67.4695 25.0825 67.6328 24.9099 67.8401 24.9042 cv
72.3748 24.9827 mo
73.1328 25.0297 73.8863 25.0937 74.6348 25.1743 cv
74.8409 25.1964 74.99 25.3815 74.9679 25.5876 cv
74.9457 25.7938 74.7606 25.9428 74.5545 25.9208 cv
73.8172 25.8413 73.075 25.7783 72.3282 25.732 cv
72.1213 25.7191 71.964 25.5409 71.9769 25.3341 cv
71.9897 25.1271 72.1678 24.9698 72.3748 24.9827 cv
76.884 25.4679 mo
77.6342 25.5833 78.3788 25.7154 79.1176 25.8637 cv
79.3209 25.9045 79.4526 26.1024 79.4117 26.3056 cv
79.3709 26.5089 79.1732 26.6406 78.9698 26.5997 cv
78.2422 26.4537 77.5088 26.3237 76.7699 26.21 cv
76.565 26.1786 76.4244 25.9869 76.4559 25.782 cv
76.4875 25.5771 76.679 25.4364 76.884 25.4679 cv
81.3309 26.3609 mo
82.067 26.5441 82.7966 26.7434 83.5193 26.9588 cv
83.718 27.018 83.8311 27.2271 83.7718 27.4257 cv
83.7127 27.6244 83.5036 27.7375 83.3049 27.6783 cv
82.5931 27.4662 81.8746 27.2698 81.1497 27.0894 cv
80.9485 27.0394 80.826 26.8358 80.8761 26.6346 cv
80.9261 26.4334 81.1297 26.3109 81.3309 26.3609 cv
85.6781 27.6562 mo
86.3956 27.9062 87.1055 28.1722 87.8076 28.4535 cv
88.0001 28.5306 88.0936 28.7491 88.0164 28.9416 cv
87.9393 29.134 87.7208 29.2275 87.5283 29.1504 cv
86.8368 28.8732 86.1376 28.6113 85.4311 28.3651 cv
85.2352 28.2969 85.1318 28.0828 85.2001 27.8871 cv
85.2683 27.6914 85.4823 27.588 85.6781 27.6562 cv
89.8977 29.3473 mo
90.5883 29.6615 91.2707 29.9909 91.9441 30.3353 cv
92.1286 30.4296 92.2018 30.6558 92.1075 30.8404 cv
92.013 31.025 91.7869 31.0981 91.6024 31.0038 cv
90.9391 30.6646 90.2671 30.3401 89.5868 30.0306 cv
89.398 29.9448 89.3147 29.7222 89.4005 29.5336 cv
89.4864 29.3448 89.709 29.2614 89.8977 29.3473 cv
93.9427 31.4153 mo
94.6012 31.7907 95.2503 32.1807 95.8896 32.5848 cv
96.0648 32.6955 96.1171 32.9274 96.0064 33.1027 cv
95.8956 33.2778 95.6638 33.3302 95.4885 33.2193 cv
94.8587 32.8213 94.2194 32.4373 93.5709 32.0675 cv
93.3908 31.9648 93.328 31.7355 93.4307 31.5555 cv
93.5334 31.3754 93.7627 31.3126 93.9427 31.4153 cv
97.781 33.8411 mo
98.4021 34.2743 99.0129 34.7213 99.613 35.1815 cv
99.7775 35.3077 99.8085 35.5433 99.6824 35.7079 cv
99.5562 35.8723 99.3206 35.9034 99.1562 35.7773 cv
98.5649 35.3239 97.9633 34.8836 97.3515 34.4569 cv
97.1814 34.3382 97.1398 34.1043 97.2583 33.9343 cv
97.3769 33.7642 97.6108 33.7225 97.781 33.8411 cv
101.382 36.6031 mo
101.961 37.0902 102.529 37.5903 103.085 38.1028 cv
103.237 38.2432 103.247 38.4807 103.107 38.6331 cv
102.966 38.7856 102.729 38.7953 102.576 38.6549 cv
102.028 38.15 101.469 37.6574 100.899 37.1776 cv
100.74 37.0441 100.72 36.8073 100.853 36.6486 cv
100.987 36.49 101.224 36.4696 101.382 36.6031 cv
104.718 39.6774 mo
105.25 40.2143 105.77 40.7632 106.278 41.3237 cv
106.417 41.4773 106.405 41.7147 106.252 41.8539 cv
106.098 41.993 105.861 41.9813 105.722 41.8276 cv
105.222 41.2756 104.709 40.7348 104.185 40.2059 cv
104.039 40.0587 104.04 39.821 104.187 39.6751 cv
104.334 39.5291 104.572 39.5301 104.718 39.6774 cv
107.762 43.0382 mo
108.243 43.6205 108.712 44.2137 109.167 44.8177 cv
109.291 44.9833 109.258 45.2186 109.093 45.3434 cv
108.927 45.4681 108.692 45.4349 108.567 45.2694 cv
108.119 44.6745 107.657 44.0901 107.183 43.5166 cv
107.051 43.3568 107.074 43.1203 107.234 42.9882 cv
107.393 42.8561 107.63 42.8786 107.762 43.0383 cv
107.762 43.0382 li
110.489 46.6583 mo
110.916 47.2809 111.328 47.9137 111.727 48.5563 cv
111.836 48.7325 111.782 48.9639 111.606 49.0732 cv
111.43 49.1824 111.198 49.1282 111.089 48.9521 cv
110.696 48.3191 110.29 47.6958 109.87 47.0825 cv
109.753 46.9114 109.796 46.6778 109.967 46.5606 cv
110.139 46.4435 110.372 46.4872 110.489 46.6583 cv
112.877 50.5079 mo
113.245 51.166 113.599 51.8332 113.937 52.5091 cv
114.03 52.6945 113.955 52.92 113.77 53.0128 cv
113.584 53.1057 113.359 53.0307 113.266 52.8454 cv
112.932 52.1796 112.584 51.5224 112.222 50.8743 cv
112.121 50.6934 112.185 50.4647 112.366 50.3634 cv
112.547 50.2623 112.776 50.327 112.877 50.5079 cv
114.905 54.5557 mo
115.211 55.2436 115.502 55.9396 115.778 56.6435 cv
115.854 56.8365 115.759 57.0543 115.566 57.1299 cv
115.373 57.2056 115.155 57.1105 115.079 56.9174 cv
114.808 56.2242 114.521 55.5386 114.219 54.8611 cv
114.135 54.6717 114.22 54.4498 114.409 54.3655 cv
114.599 54.2812 114.821 54.3664 114.905 54.5557 cv
116.557 58.7741 mo
116.8 59.4883 117.027 60.2098 117.238 60.9381 cv
117.296 61.1373 117.181 61.3454 116.982 61.4031 cv
116.783 61.4607 116.574 61.3461 116.517 61.1469 cv
116.309 60.4296 116.085 59.7191 115.846 59.0157 cv
115.78 58.8195 115.885 58.6062 116.081 58.5396 cv
116.277 58.4728 116.49 58.5779 116.557 58.7741 cv
117.819 63.1308 mo
117.995 63.8637 118.156 64.6028 118.299 65.3477 cv
118.338 65.5513 118.205 65.7482 118.002 65.7875 cv
117.798 65.8268 117.601 65.6935 117.562 65.4899 cv
117.42 64.7563 117.263 64.0282 117.089 63.3065 cv
117.04 63.1049 117.165 62.9023 117.366 62.8537 cv
117.568 62.8052 117.77 62.9293 117.819 63.1308 cv
118.678 67.5842 mo
118.787 68.3294 118.879 69.0799 118.955 69.8355 cv
118.975 70.0417 118.825 70.2257 118.619 70.2462 cv
118.412 70.2669 118.228 70.1164 118.208 69.9101 cv
118.133 69.1659 118.042 68.4266 117.935 67.6927 cv
117.905 67.4876 118.047 67.297 118.252 67.267 cv
118.457 67.2371 118.648 67.379 118.678 67.5842 cv
119.129 72.0966 mo
119.171 72.8482 119.195 73.604 119.203 74.3639 cv
119.205 74.5712 119.038 74.741 118.831 74.7431 cv
118.624 74.7451 118.454 74.5788 118.452 74.3715 cv
118.445 73.6227 118.42 72.878 118.38 72.1377 cv
118.368 71.9307 118.527 71.7537 118.734 71.7424 cv
118.941 71.731 119.118 71.8897 119.129 72.0966 cv
119.175 76.6319 mo
119.148 77.3911 119.105 78.1461 119.045 78.8963 cv
119.029 79.1029 118.848 79.2572 118.641 79.2407 cv
118.435 79.2242 118.281 79.0433 118.297 78.8366 cv
118.356 78.0976 118.398 77.354 118.424 76.606 cv
118.432 76.3988 118.605 76.2367 118.813 76.2438 cv
119.02 76.251 119.182 76.4247 119.175 76.6319 cv
118.814 81.1526 mo
118.72 81.9059 118.609 82.654 118.481 83.3964 cv
118.446 83.6007 118.252 83.7379 118.047 83.7028 cv
117.843 83.6677 117.706 83.4736 117.741 83.2692 cv
117.867 82.538 117.976 81.8013 118.069 81.0592 cv
118.095 80.8536 118.283 80.7077 118.488 80.7335 cv
118.694 80.7593 118.84 80.947 118.814 81.1526 cv
118.046 85.6227 mo
117.884 86.3638 117.705 87.0986 117.51 87.8269 cv
117.456 88.0273 117.25 88.1461 117.05 88.0926 cv
116.85 88.039 116.731 87.8331 116.785 87.6329 cv
116.976 86.9156 117.153 86.1918 117.313 85.462 cv
117.357 85.2596 117.557 85.1313 117.76 85.1757 cv
117.962 85.2201 118.09 85.4203 118.046 85.6227 cv
116.873 90.0045 mo
116.644 90.729 116.398 91.4463 116.136 92.1561 cv
116.064 92.3506 115.849 92.4502 115.654 92.3785 cv
115.459 92.3069 115.36 92.091 115.432 91.8965 cv
115.689 91.1974 115.931 90.491 116.158 89.7775 cv
116.22 89.5799 116.431 89.4705 116.629 89.5332 cv
116.827 89.5959 116.936 89.8069 116.873 90.0045 cv
115.301 94.2709 mo
115.006 94.9704 114.696 95.6618 114.371 96.3447 cv
114.282 96.5318 114.058 96.6112 113.871 96.5221 cv
113.683 96.4329 113.604 96.2089 113.693 96.0218 cv
114.014 95.3493 114.319 94.6683 114.609 93.9794 cv
114.69 93.7883 114.91 93.6988 115.101 93.7792 cv
115.292 93.8597 115.382 94.0799 115.301 94.2709 cv
113.347 98.3731 mo
112.99 99.0421 112.618 99.702 112.232 100.352 cv
112.126 100.531 111.896 100.589 111.718 100.484 cv
111.54 100.378 111.481 100.147 111.587 99.9691 cv
111.967 99.3284 112.333 98.6785 112.685 98.0197 cv
112.782 97.8367 113.01 97.7676 113.193 97.8653 cv
113.375 97.9628 113.445 98.1902 113.347 98.3731 cv
111.029 102.278 mo
110.613 102.911 110.183 103.535 109.74 104.147 cv
109.618 104.315 109.384 104.353 109.216 104.231 cv
109.048 104.11 109.01 103.875 109.132 103.707 cv
109.569 103.104 109.992 102.49 110.402 101.866 cv
110.515 101.693 110.748 101.645 110.921 101.758 cv
111.095 101.872 111.143 102.105 111.029 102.278 cv
108.368 105.956 mo
107.897 106.548 107.413 107.129 106.916 107.7 cv
106.78 107.856 106.543 107.872 106.386 107.736 cv
106.23 107.6 106.214 107.363 106.35 107.206 cv
106.839 106.645 107.316 106.072 107.78 105.488 cv
107.909 105.326 108.145 105.299 108.308 105.428 cv
108.47 105.557 108.497 105.793 108.368 105.955 cv
108.368 105.956 li
105.387 109.376 mo
104.865 109.923 104.331 110.458 103.784 110.981 cv
103.635 111.125 103.397 111.12 103.254 110.97 cv
103.11 110.82 103.115 110.582 103.265 110.439 cv
103.803 109.924 104.33 109.397 104.844 108.858 cv
104.987 108.708 105.225 108.702 105.375 108.845 cv
105.525 108.988 105.53 109.226 105.387 109.376 cv
102.111 112.512 mo
101.543 113.01 100.963 113.495 100.372 113.966 cv
100.209 114.096 99.9733 114.069 99.844 113.907 cv
99.7146 113.745 99.7411 113.509 99.9032 113.379 cv
100.485 112.915 101.057 112.437 101.617 111.947 cv
101.773 111.811 102.01 111.827 102.147 111.983 cv
102.283 112.139 102.268 112.376 102.111 112.512 cv
98.5681 115.34 mo
97.9573 115.784 97.3361 116.214 96.7049 116.63 cv
96.5318 116.744 96.299 116.696 96.1848 116.523 cv
96.0707 116.35 96.1185 116.118 96.2916 116.003 cv
96.9132 115.593 97.5252 115.17 98.1268 114.732 cv
98.2945 114.611 98.5292 114.648 98.6512 114.815 cv
98.773 114.983 98.7358 115.218 98.5681 115.34 cv
94.7857 117.834 mo
94.138 118.221 93.4807 118.593 92.8145 118.95 cv
92.6318 119.048 92.4042 118.979 92.3062 118.797 cv
92.2083 118.614 92.2769 118.386 92.4596 118.288 cv
93.1158 117.937 93.7632 117.57 94.4012 117.19 cv
94.5792 117.083 94.8097 117.142 94.9158 117.32 cv
95.022 117.498 94.9637 117.728 94.7857 117.834 cv
90.7953 119.975 mo
90.116 120.3 89.4281 120.611 88.7322 120.906 cv
88.5414 120.987 88.321 120.898 88.24 120.707 cv
88.159 120.517 88.2481 120.296 88.4389 120.215 cv
89.1243 119.924 89.8018 119.618 90.4708 119.298 cv
90.6577 119.208 90.882 119.287 90.9715 119.474 cv
91.0611 119.661 90.9822 119.885 90.7953 119.975 cv
86.6297 121.743 mo
85.9224 122.005 85.2076 122.252 84.4857 122.484 cv
84.2883 122.547 84.0769 122.438 84.0136 122.241 cv
83.9505 122.043 84.0592 121.832 84.2566 121.769 cv
84.9676 121.541 85.6717 121.297 86.3682 121.039 cv
86.5625 120.967 86.7786 121.066 86.8509 121.26 cv
86.923 121.454 86.824 121.67 86.6297 121.743 cv
82.3101 123.126 mo
81.5823 123.323 80.8479 123.504 80.1073 123.668 cv
79.905 123.713 79.7044 123.586 79.6595 123.383 cv
79.6146 123.181 79.7423 122.98 79.9447 122.935 cv
80.6739 122.773 81.3972 122.595 82.114 122.401 cv
82.3142 122.347 82.5203 122.466 82.5744 122.666 cv
82.6286 122.866 82.5102 123.072 82.3101 123.126 cv
82.3101 123.126 li
77.8823 124.109 mo
77.1403 124.239 76.3925 124.352 75.6396 124.449 cv
75.434 124.475 75.2459 124.33 75.2197 124.124 cv
75.1933 123.918 75.3386 123.73 75.5442 123.704 cv
76.2859 123.609 77.0223 123.497 77.7532 123.37 cv
77.9574 123.334 78.1518 123.471 78.1875 123.675 cv
78.2232 123.879 78.0866 124.074 77.8823 124.109 cv
73.3839 124.686 mo
72.6338 124.747 71.879 124.793 71.1198 124.821 cv
70.9126 124.829 70.7384 124.667 70.7307 124.46 cv
70.723 124.253 70.8846 124.078 71.0918 124.071 cv
71.8397 124.043 72.5834 123.998 73.3223 123.937 cv
73.5289 123.92 73.7103 124.074 73.7272 124.281 cv
73.7442 124.487 73.5905 124.669 73.3839 124.686 cv
68.8514 124.855 mo
68.0916 124.849 67.3358 124.826 66.5845 124.787 cv
66.3774 124.776 66.2184 124.6 66.2291 124.393 cv
66.24 124.186 66.4166 124.027 66.6236 124.037 cv
67.3638 124.076 68.1083 124.098 68.8569 124.104 cv
69.0643 124.105 69.231 124.275 69.2296 124.482 cv
69.228 124.689 69.0587 124.856 68.8514 124.855 cv
64.3227 124.618 mo
63.567 124.545 62.8162 124.454 62.0707 124.347 cv
61.8655 124.318 61.723 124.128 61.7524 123.922 cv
61.7819 123.717 61.9721 123.575 62.1774 123.604 cv
62.9116 123.709 63.651 123.798 64.3956 123.871 cv
64.6018 123.891 64.7528 124.075 64.7327 124.281 cv
64.7126 124.487 64.5291 124.638 64.3227 124.618 cv
59.8332 123.974 mo
59.0878 123.832 58.3483 123.674 57.615 123.5 cv
57.4133 123.452 57.2886 123.249 57.3366 123.047 cv
57.3846 122.846 57.5871 122.721 57.7887 122.769 cv
58.5109 122.941 59.2393 123.097 59.9735 123.237 cv
60.1771 123.275 60.3108 123.472 60.2721 123.676 cv
60.2333 123.879 60.0369 124.013 59.8332 123.974 cv
59.8332 123.974 li
55.4206 122.924 mo
54.6917 122.715 53.9696 122.49 53.2547 122.249 cv
53.0582 122.183 52.9527 121.97 53.019 121.773 cv
53.0851 121.577 53.298 121.471 53.4944 121.538 cv
54.1985 121.775 54.9096 121.997 55.6275 122.203 cv
55.8268 122.26 55.942 122.468 55.8848 122.667 cv
55.8278 122.866 55.6199 122.981 55.4206 122.924 cv
51.1169 121.474 mo
50.4092 121.198 49.7093 120.907 49.0176 120.601 cv
48.8281 120.517 48.7423 120.296 48.8263 120.106 cv
48.9102 119.916 49.1319 119.831 49.3215 119.915 cv
50.0027 120.216 50.692 120.503 51.3891 120.774 cv
51.5822 120.849 51.6779 121.066 51.6028 121.26 cv
51.5276 121.453 51.3102 121.549 51.1169 121.473 cv
51.1169 121.474 li
46.9611 119.634 mo
46.2822 119.296 45.6122 118.942 44.9512 118.575 cv
44.7702 118.474 44.705 118.245 44.8059 118.064 cv
44.9067 117.883 45.1354 117.818 45.3165 117.919 cv
45.9673 118.281 46.6273 118.629 47.2959 118.962 cv
47.4814 119.055 47.5569 119.28 47.4645 119.466 cv
47.3719 119.651 47.1466 119.727 46.9611 119.634 cv
42.9924 117.425 mo
42.3478 117.027 41.7129 116.614 41.0883 116.188 cv
40.917 116.071 40.8728 115.838 40.9897 115.666 cv
41.1066 115.495 41.3402 115.451 41.5114 115.568 cv
42.1268 115.988 42.752 116.394 43.3871 116.786 cv
43.5633 116.895 43.618 117.127 43.509 117.303 cv
43.4001 117.479 43.1688 117.534 42.9924 117.425 cv
39.2425 114.866 mo
38.6372 114.412 38.0424 113.944 37.4588 113.463 cv
37.2988 113.331 37.276 113.094 37.408 112.934 cv
37.5398 112.774 37.7764 112.751 37.9364 112.883 cv
38.5112 113.357 39.0969 113.818 39.6933 114.266 cv
39.859 114.39 39.8926 114.626 39.768 114.791 cv
39.6436 114.957 39.4082 114.991 39.2425 114.866 cv
35.7409 111.98 mo
35.1794 111.473 34.6296 110.954 34.0918 110.422 cv
33.9443 110.277 33.9429 110.039 34.0887 109.891 cv
34.2345 109.744 34.4721 109.743 34.6196 109.888 cv
35.1493 110.412 35.6909 110.924 36.2439 111.423 cv
36.3979 111.562 36.4099 111.799 36.2711 111.953 cv
36.1321 112.107 35.8947 112.119 35.7409 111.98 cv
32.515 108.792 mo
32.002 108.237 31.5014 107.67 31.0137 107.092 cv
30.88 106.934 30.9 106.697 31.0585 106.563 cv
31.2168 106.43 31.4537 106.45 31.5874 106.608 cv
32.0679 107.177 32.5609 107.736 33.0663 108.282 cv
33.2071 108.434 33.1976 108.672 33.0454 108.813 cv
32.8931 108.953 32.6557 108.944 32.515 108.792 cv
29.5909 105.327 mo
29.1303 104.729 28.6831 104.119 28.2496 103.5 cv
28.1306 103.33 28.1719 103.096 28.3419 102.977 cv
28.5117 102.858 28.7457 102.9 28.8647 103.069 cv
29.2917 103.68 29.7322 104.28 30.1858 104.869 cv
30.3123 105.034 30.2816 105.269 30.1173 105.396 cv
29.953 105.522 29.7173 105.491 29.5909 105.327 cv
26.9925 101.614 mo
26.5883 100.978 26.1982 100.331 25.8225 99.6746 cv
25.7195 99.4947 25.7818 99.2653 25.9617 99.1623 cv
26.1416 99.0593 26.371 99.1216 26.474 99.3016 cv
26.844 99.9477 27.2283 100.585 27.6265 101.212 cv
27.7375 101.387 27.6856 101.619 27.5105 101.73 cv
27.3355 101.841 27.1036 101.79 26.9925 101.614 cv
24.742 97.6841 mo
24.3976 97.0139 24.0679 96.3349 23.7533 95.6473 cv
23.667 95.4588 23.75 95.2361 23.9384 95.1498 cv
24.127 95.0635 24.3497 95.1465 24.436 95.3349 cv
24.7458 96.012 25.0705 96.6808 25.4097 97.3411 cv
25.5045 97.5254 25.4318 97.7517 25.2474 97.8465 cv
25.063 97.9412 24.8366 97.8686 24.742 97.6841 cv
22.8587 93.5684 mo
22.5763 92.8686 22.3093 92.161 22.0581 91.4459 cv
21.9893 91.2503 22.0922 91.036 22.2878 90.9673 cv
22.4833 90.8987 22.6976 91.0015 22.7663 91.1971 cv
23.0137 91.9012 23.2768 92.5983 23.5549 93.2875 cv
23.6325 93.4798 23.5396 93.6984 23.3473 93.776 cv
23.1551 93.8536 22.9363 93.7607 22.8587 93.5685 cv
22.8587 93.5684 li
21.3552 89.289 mo
21.138 88.5669 20.9368 87.8379 20.7518 87.1023 cv
20.7012 86.9012 20.8232 86.6973 21.0242 86.6466 cv
21.2253 86.5961 21.4292 86.718 21.4799 86.9191 cv
21.662 87.6436 21.8603 88.3615 22.0742 89.0729 cv
22.1339 89.2713 22.0213 89.4806 21.8228 89.5404 cv
21.6242 89.6001 21.4149 89.4876 21.3552 89.289 cv
20.2488 84.8903 mo
20.0986 84.152 19.9646 83.4077 19.8474 82.6579 cv
19.8154 82.4531 19.9554 82.2611 20.1602 82.229 cv
20.365 82.197 20.557 82.3371 20.5892 82.5419 cv
20.7046 83.2804 20.8366 84.0135 20.9845 84.7407 cv
21.0258 84.9438 20.8947 85.1421 20.6915 85.1834 cv
20.4884 85.2247 20.2902 85.0935 20.2488 84.8903 cv
19.5478 80.4095 mo
19.4654 79.6613 19.3993 78.908 19.3503 78.1501 cv
19.3369 77.9433 19.4937 77.7647 19.7006 77.7513 cv
19.9074 77.7379 20.0861 77.8947 20.0995 78.1016 cv
20.1478 78.8482 20.2128 79.5902 20.2941 80.3272 cv
20.3168 80.5333 20.1681 80.7188 19.9621 80.7416 cv
19.756 80.7643 19.5706 80.6156 19.5478 80.4095 cv
19.2545 75.8838 mo
19.2478 75.5469 19.2443 75.2091 19.2445 74.8706 cv
19.2443 74.1108 19.2614 73.3549 19.295 72.6033 cv
19.3042 72.3963 19.4796 72.2358 19.6866 72.2451 cv
19.8938 72.2543 20.0542 72.4297 20.0449 72.6367 cv
20.0118 73.3772 19.9952 74.122 19.9952 74.8706 cv
19.9952 75.2042 19.9984 75.5369 20.0051 75.8689 cv
20.0092 76.0762 19.8445 76.2475 19.6372 76.2517 cv
19.43 76.2558 19.2586 76.0911 19.2545 75.8838 cv
1 /0 /CSD get_res sepcs
1 sep
f
99.6398 87.3405 mo
109.39 70.2206 102.12 40.8406 82.9998 35.6906 cv
71.4098 32.5706 55.4798 38.3406 46.2197 46.8206 cv
40.2897 52.2506 37.0897 58.7906 34.4398 66.3606 cv
33.0098 70.4306 31.7498 74.8006 31.6698 79.0506 cv
31.3898 93.4606 44.7798 106.441 58.5698 109.311 cv
75.6998 112.881 93.4398 100.851 99.6398 87.3405 cv
.109316 .05243 .00643931 0 cmyk
ef
99.6398 87.3405 mo
99.3137 87.1549 li
102.201 82.0869 103.584 75.9065 103.584 69.6008 cv
103.584 62.2484 101.703 54.7303 98.1726 48.6231 cv
94.6409 42.5134 89.4764 37.8237 82.9021 36.053 cv
80.7632 35.4772 78.4671 35.2079 76.0865 35.2079 cv
65.7847 35.2016 53.9155 40.2746 46.4733 47.0974 cv
40.6073 52.4697 37.4369 58.9372 34.7941 66.4846 cv
33.3681 70.5405 32.1227 74.877 32.0451 79.0577 cv
32.0422 79.2038 32.0408 79.3496 32.0408 79.4952 cv
32.0396 86.4914 35.3029 93.1507 40.2726 98.417 cv
45.24 103.683 51.9077 107.542 58.6462 108.943 cv
60.6939 109.37 62.7507 109.571 64.7961 109.571 cv
79.6445 109.584 93.923 98.9218 99.2986 87.184 cv
99.3137 87.1549 li
99.6398 87.3405 li
99.9809 87.4972 li
94.4575 99.5086 80.0068 110.309 64.7961 110.322 cv
62.7015 110.322 60.593 110.116 58.4931 109.678 cv
51.5837 108.239 44.7993 104.306 39.7266 98.9322 cv
34.6561 93.5589 31.2912 86.7306 31.29 79.4952 cv
31.29 79.3447 31.2916 79.1941 31.2944 79.0433 cv
31.3768 74.7242 32.6514 70.3208 34.0857 66.2362 cv
36.7427 58.6439 39.9722 52.0315 45.9662 46.5438 cv
53.5674 39.5907 65.543 34.4635 76.0865 34.4572 cv
78.5236 34.4572 80.8848 34.7325 83.0974 35.3282 cv
89.9052 37.162 95.2201 42.0113 98.8226 48.2476 cv
102.427 54.4863 104.333 62.1211 104.334 69.6008 cv
104.334 76.0152 102.931 82.3187 99.966 87.5264 cv
99.6398 87.3405 li
99.9809 87.4972 li
99.6398 87.3405 li
1 /0 /CSD get_res sepcs
1 sep
f
23.0198 25.2606 mo
21.7698 25.2606 20.7498 24.2505 20.7498 23.0005 cv
20.7498 21.7406 21.7698 20.7306 23.0198 20.7306 cv
24.2698 20.7306 25.2898 21.7406 25.2898 23.0005 cv
25.2898 24.2505 24.2698 25.2606 23.0198 25.2606 cv
.909422 .862669 .868009 .769924 cmyk
f
20.7498 23.0006 mo
20.7498 21.7406 21.7698 20.7306 23.0198 20.7306 cv
24.2698 20.7306 25.2898 21.7406 25.2898 23.0006 cv
25.2898 24.2506 24.2698 25.2606 23.0198 25.2606 cv
21.7698 25.2606 20.7498 24.2506 20.7498 23.0006 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H)
%%Title: (MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28762 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
54 <001C60D8A8C9B7A73DB9D42B5CFCEC7F01981AFE517801773FF8AAF15E7C
4CB81154613C5FD1D562CDDE0EE4B2DAF879E403D864479CE189144ADF8E91EE
92B02765232E00139453EA1282D56AFE97EA9944DCEFDCA33912CFC91F718CF3
8695EB5A489DB0F386655B77C93690B3CBA172BCF76AEA68C342A5AB080E96A1
B7F4FF7B91F4DC4899DAAB0BFA5518431FA6DD33F2B7B3F167C016858873F122
28ADBBB7B15314E534A36AD4CB224A2D0B1287F28FF844C6570FD53B740AFC97
655868483C6FED558A5D1250F9D6D1D2E8961E60B1743758E5F657FB6C585A09
A0464FA3> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H /Identity-H 0 [/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
53.3998 81.3906 mo
(\0006)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
53.3998 81.3906 mo
(\0006) false chp
.34286 lw
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
82 <001C60D8A8C9B7A73DB6985301E401DC725907D0844BFF394464D322EA46
F6487079DA667C31FA03ACB3FA808E04EE37A03FF7FDFB3A3F48EE1DF47F3714
75D3DBBAB82B4F8E851C89E16F753C27E4EEFD147D2668C06A6CC28CAD86EEDC
CBFD6A07DE9C91FB3E2BE5E3BECEC67E3BC11C338B68C7E5A41BDB217995BE6C
85F06980A83CC2> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
59.4248 81.3906 mo
(\000R)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
59.4248 81.3906 mo
(\000R) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
88 <001C60D8A8C9B7A73DB9114A346127958440054B45D6DD27EA8D471375D5
72445BC4C286672B1840EC5F872969EDC316D1EFFD044E5CCF1BAE826A677491
821E6325850E1DF6D4B9927F904C350BF2975D73D4323360EC025DEEE1956D77
4E3B0B361DD7B2990B623979CEF2C0E741CDD2397E25D69433398449320E4FB3
F0E49A55DB2D667D96291B3513A398EEA9D6FEFC5CDF7C1C4AB4A732A2A66C48
06AF99AABDEE8267000B4F92EF890FB1FF602BEB892FAAB7DF6692738FEB1E98
844B6E> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
65.4498 81.3906 mo
(\000X)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
65.4498 81.3906 mo
(\000X) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
85 <001C60D8A8C9B7A73DB97983BF28BFD90FC72EE9EF2B660140486BB7EDF6
EBD6F8BCB899A4EB501C6C3D3F4A057E2E2BC5082A8DA39FC13765D4D26515C0
B70E71DEF52C1559A08E5B2C61E8774E9AF7C85DF1980C54722E49BBB603BB12
FA72DE5BF0E6C1C9478648B4F622D4B31ADA9DF0C5F58A8D0286323BEAE89B93
6BFA9EDA0297E6CFA9321054E0C6F4929FA575EBD73F7B3CEE4FD4EFDAEE4950
DC13EF769EC02165EDD67FC807A3EF00568FB141086344> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
71.4748 81.3906 mo
(\000U)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
71.4748 81.3906 mo
(\000U) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
70 <001C60D8A8C9B7A73DB9CB6D5D716C71BC7C8E81968EFC130C260B635485
7097DA7FE92DA981AAD523A3AC2101169C7334C9B1B5118E0EE2BCDA1F248FC5
D7FDB82DE1160A4F1E28C4CDB707E6F75A92C633B8A0BB70054B60DB1C96584F
D98A2C2EB98459415075C1489E4CBDD93EAF4322421B8D157545E6591F222090
2B9C2EED31998A37902025C9599B2093B7CEE7D98C94495CFB75D36D06B20B4C
61772C4D5E024356F729426C8E24BA> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
77.4998 81.3906 mo
(\000F)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
77.4998 81.3906 mo
(\000F) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
72 <001C60D8A8C9B7A73DB937B4101DBBF46DCDCD3594B4AAC949BC12DB93EB
145354BBB8C08C11925AC0F46D8DED6ED48766AD9F227F80E78F994FA53412AF
E33248FD828F9162118D6670CC6A028F6D1DD6E1E39F82490DBCEFB527759926
A45C28D02E5E3C215B6E23DB6B07742833D39B4C404EB9F2FBEFF8CC0B79F18F
65B9FD4B7E27C7AFDC> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
83.5248 81.3906 mo
(\000H)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
83.5248 81.3906 mo
(\000H) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
36 <001C60D8A8C9B7A73DB9D2D67B1D3A224FA5A13E5765A8D80B57077B7C0D
5EE80C38C0844F83D9CA4CA31034FE59C812CD484095B8A40CCCF60348FE6542
AEECC5DF128F41BF95D8C6533892661C89C22DE13F3D89E1913522615585C3AB
6D875343A34A7AB5ED5C2D9FD86132CBE3128CF0C0176E3F3851618B1DF70F4C
0BB9F3BEFB258F9A88910575AC54> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
44.8998 18.1906 mo
(\000$)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
44.8998 18.1906 mo
(\000$) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
50.8998 18.1906 mo
(\000U)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
50.8998 18.1906 mo
(\000U) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
56.8998 18.1906 mo
(\000H)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
56.8998 18.1906 mo
(\000H) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
68 <001C60D8A8C9B7A73DB98653E05A9FC5B4254F58F5858E2F9DD35F00B619
566B7BB4F7C4C2B42ED1669A11C0ABDCF71636A26724909F770B9F3B832A0ADD
704744512CA49951968524C6F19BB75839DA017D7F9A68C0EB746C90532AE970
0011A529A34FFFE7DF8E2DA1CAE7DDD6B188776A8F3BA22028327E10150489A6
BD920AB47DA700ED3CC8441DA90DAE8B3DCC2FBF82F09622616A7171B54C5A51
A4C247547246B8172441710905FC36527600CE160A1337FF6089ABEF5CCF192F
4FDDF1FDD8178A05039AEAB3262D260C73FC446748142821CBE5B9EBC3AEB024
C5FECF6E14EE6775D36790CEB4964AEE903A1EE6EA67C32D7FE72E7C85417E80
AA5C078EB6FE4C0CD4> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
62.8998 18.1906 mo
(\000D)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
62.8998 18.1906 mo
(\000D) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
3 <001C60D8A8C9B7A73D40> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
68.8998 18.1906 mo
(\000\003)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
68.8998 18.1906 mo
(\000\003) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
44 <001C60D8A8C9B7A73DB9696D477FC5C77CC13F785D0DEFFCFE399F815467
2C738C7542738E124DFEDA4F33708349FE4D7ECBEDDDE92AFC81C7A51B45AEEC
CE4AEBB160C3CBB2056F1DB3B4BB9EAEADC6349A0E672BA304F2323994F5EFB4
AD37BAA9> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
74.8998 18.1906 mo
(\000,)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
74.8998 18.1906 mo
(\000,) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
226.35 176.351 mo
(\000$)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
226.35 176.351 mo
(\000$) false chp
.34357 lw
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
232.35 176.351 mo
(\000U)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
232.35 176.351 mo
(\000U) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
238.35 176.351 mo
(\000H)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
238.35 176.351 mo
(\000H) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
244.35 176.351 mo
(\000D)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
244.35 176.351 mo
(\000D) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
250.35 176.351 mo
(\000\003)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
250.35 176.351 mo
(\000\003) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
256.35 176.351 mo
(\000,)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
256.35 176.351 mo
(\000,) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
262.35 176.351 mo
(\000,)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12.025 0 0 -12.025 0 0 ]msf
262.35 176.351 mo
(\000,) false chp
@
91.0497 73.5906 mo
89.7997 73.5906 88.7798 72.5806 88.7798 71.3306 cv
88.7798 70.0706 89.7997 69.0606 91.0497 69.0606 cv
92.2998 69.0606 93.3198 70.0706 93.3198 71.3306 cv
93.3198 72.5806 92.2998 73.5906 91.0497 73.5906 cv
.940124 .884123 .866941 .779416 cmyk
f
.75075 lw
88.7798 71.3306 mo
88.7798 70.0706 89.7998 69.0606 91.0498 69.0606 cv
92.2998 69.0606 93.3198 70.0706 93.3198 71.3306 cv
93.3198 72.5806 92.2998 73.5906 91.0498 73.5906 cv
89.7998 73.5906 88.7798 72.5806 88.7798 71.3306 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
123.58 125.831 mo
123.204 125.831 li
123.205 124.363 124.394 123.188 125.85 123.185 cv
127.306 123.188 128.495 124.363 128.495 125.831 cv
128.494 127.29 127.306 128.466 125.85 128.466 cv
124.394 128.466 123.205 127.29 123.204 125.831 cv
123.58 125.831 li
123.955 125.831 li
123.957 126.871 124.806 127.713 125.85 127.715 cv
126.894 127.713 127.743 126.871 127.744 125.831 cv
127.743 124.778 126.894 123.936 125.85 123.936 cv
124.806 123.936 123.957 124.778 123.955 125.831 cv
123.58 125.831 li
f
89.9198 19.7406 mo
88.6698 19.7406 87.6497 18.7206 87.6497 17.4706 cv
87.6497 16.2206 88.6698 15.2005 89.9198 15.2005 cv
91.1698 15.2005 92.1898 16.2206 92.1898 17.4706 cv
92.1898 18.7206 91.1698 19.7406 89.9198 19.7406 cv
.909422 .862669 .868009 .769924 cmyk
f
87.6498 17.4706 mo
87.6498 16.2206 88.6698 15.2006 89.9198 15.2006 cv
91.1698 15.2006 92.1898 16.2206 92.1898 17.4706 cv
92.1898 18.7206 91.1698 19.7406 89.9198 19.7406 cv
88.6698 19.7406 87.6498 18.7206 87.6498 17.4706 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
147.74 57.1506 mo
146.49 57.1506 145.48 56.1406 145.48 54.8906 cv
145.48 53.6305 146.49 52.6206 147.74 52.6206 cv
149 52.6206 150.01 53.6305 150.01 54.8906 cv
150.01 56.1406 149 57.1506 147.74 57.1506 cv
.909422 .862669 .868009 .769924 cmyk
f
145.48 54.8906 mo
145.48 53.6306 146.49 52.6206 147.74 52.6206 cv
149 52.6206 150.01 53.6306 150.01 54.8906 cv
150.01 56.1406 149 57.1506 147.74 57.1506 cv
146.49 57.1506 145.48 56.1406 145.48 54.8906 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
196.89 106.301 mo
196.514 106.301 li
196.515 104.842 197.701 103.656 199.16 103.655 cv
200.618 103.656 201.804 104.842 201.805 106.301 cv
201.804 107.759 200.618 108.945 199.16 108.946 cv
197.701 108.945 196.515 107.759 196.514 106.301 cv
196.89 106.301 li
197.265 106.301 li
197.267 107.342 198.118 108.193 199.16 108.195 cv
200.201 108.193 201.053 107.342 201.054 106.301 cv
201.053 105.259 200.201 104.408 199.16 104.406 cv
198.118 104.408 197.267 105.259 197.265 106.301 cv
196.89 106.301 li
f
71.2098 91.5206 mo
69.9598 91.5206 68.9398 90.5106 68.9398 89.2606 cv
68.9398 88.0005 69.9598 86.9905 71.2098 86.9905 cv
72.4598 86.9905 73.4798 88.0005 73.4798 89.2606 cv
73.4798 90.5106 72.4598 91.5206 71.2098 91.5206 cv
.940124 .884123 .866941 .779416 cmyk
f
68.9398 89.2606 mo
68.9398 88.0006 69.9598 86.9906 71.2098 86.9906 cv
72.4598 86.9906 73.4798 88.0006 73.4798 89.2606 cv
73.4798 90.5106 72.4598 91.5206 71.2098 91.5206 cv
69.9598 91.5206 68.9398 90.5106 68.9398 89.2606 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
196.89 106.301 mo
196.514 106.301 li
196.515 104.842 197.701 103.656 199.16 103.655 cv
200.618 103.656 201.804 104.842 201.805 106.301 cv
201.804 107.759 200.618 108.945 199.16 108.946 cv
197.701 108.945 196.515 107.759 196.514 106.301 cv
196.89 106.301 li
197.265 106.301 li
197.267 107.342 198.118 108.193 199.16 108.195 cv
200.201 108.193 201.053 107.342 201.054 106.301 cv
201.053 105.259 200.201 104.408 199.16 104.406 cv
198.118 104.408 197.267 105.259 197.265 106.301 cv
196.89 106.301 li
f
250.57 159.981 mo
249.32 159.981 248.31 158.971 248.31 157.721 cv
248.31 156.461 249.32 155.451 250.57 155.451 cv
251.83 155.451 252.84 156.461 252.84 157.721 cv
252.84 158.971 251.83 159.981 250.57 159.981 cv
.909422 .862669 .868009 .769924 cmyk
f
248.31 157.721 mo
248.31 156.461 249.32 155.451 250.57 155.451 cv
251.83 155.451 252.84 156.461 252.84 157.721 cv
252.84 158.971 251.83 159.981 250.57 159.981 cv
249.32 159.981 248.31 158.971 248.31 157.721 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
249.79 57.1506 mo
248.54 57.1506 247.52 56.1406 247.52 54.8906 cv
247.52 53.6305 248.54 52.6206 249.79 52.6206 cv
251.04 52.6206 252.06 53.6305 252.06 54.8906 cv
252.06 56.1406 251.04 57.1506 249.79 57.1506 cv
.909422 .862669 .868009 .769924 cmyk
f
247.52 54.8906 mo
247.52 53.6306 248.54 52.6206 249.79 52.6206 cv
251.04 52.6206 252.06 53.6306 252.06 54.8906 cv
252.06 56.1406 251.04 57.1506 249.79 57.1506 cv
248.54 57.1506 247.52 56.1406 247.52 54.8906 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
196.89 106.301 mo
196.514 106.301 li
196.515 104.842 197.701 103.656 199.16 103.655 cv
200.618 103.656 201.804 104.842 201.805 106.301 cv
201.804 107.759 200.618 108.945 199.16 108.946 cv
197.701 108.945 196.515 107.759 196.514 106.301 cv
196.89 106.301 li
197.265 106.301 li
197.267 107.342 198.118 108.193 199.16 108.195 cv
200.201 108.193 201.053 107.342 201.054 106.301 cv
201.053 105.259 200.201 104.408 199.16 104.406 cv
198.118 104.408 197.267 105.259 197.265 106.301 cv
196.89 106.301 li
f
240.15 113.851 mo
238.9 113.851 237.89 112.831 237.89 111.581 cv
237.89 110.331 238.9 109.311 240.15 109.311 cv
241.41 109.311 242.42 110.331 242.42 111.581 cv
242.42 112.831 241.41 113.851 240.15 113.851 cv
.909422 .862669 .868009 .769924 cmyk
f
237.89 111.581 mo
237.89 110.331 238.9 109.311 240.15 109.311 cv
241.41 109.311 242.42 110.331 242.42 111.581 cv
242.42 112.831 241.41 113.851 240.15 113.851 cv
238.9 113.851 237.89 112.831 237.89 111.581 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
291.57 165.261 mo
290.32 165.261 289.3 164.251 289.3 162.991 cv
289.3 161.741 290.32 160.731 291.57 160.731 cv
292.82 160.731 293.84 161.741 293.84 162.991 cv
293.84 164.251 292.82 165.261 291.57 165.261 cv
.909422 .862669 .868009 .769924 cmyk
f
289.3 162.991 mo
289.3 161.741 290.32 160.731 291.57 160.731 cv
292.82 160.731 293.84 161.741 293.84 162.991 cv
293.84 164.251 292.82 165.261 291.57 165.261 cv
290.32 165.261 289.3 164.251 289.3 162.991 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
55.8998 37.3106 mo
54.6497 37.3106 53.6299 36.3006 53.6299 35.0406 cv
53.6299 33.7906 54.6497 32.7806 55.8998 32.7806 cv
57.1498 32.7806 58.1698 33.7906 58.1698 35.0406 cv
58.1698 36.3006 57.1498 37.3106 55.8998 37.3106 cv
.909422 .862669 .868009 .769924 cmyk
f
53.6298 35.0406 mo
53.6298 33.7906 54.6498 32.7806 55.8998 32.7806 cv
57.1498 32.7806 58.1698 33.7906 58.1698 35.0406 cv
58.1698 36.3006 57.1498 37.3106 55.8998 37.3106 cv
54.6498 37.3106 53.6298 36.3006 53.6298 35.0406 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
105.23 96.2707 mo
103.97 96.2707 102.96 95.2605 102.96 94.0006 cv
102.96 92.7506 103.97 91.7406 105.23 91.7406 cv
106.48 91.7406 107.49 92.7506 107.49 94.0006 cv
107.49 95.2605 106.48 96.2707 105.23 96.2707 cv
.909422 .862669 .868009 .769924 cmyk
f
102.96 94.0006 mo
102.96 92.7506 103.97 91.7406 105.23 91.7406 cv
106.48 91.7406 107.49 92.7506 107.49 94.0006 cv
107.49 95.2606 106.48 96.2706 105.23 96.2706 cv
103.97 96.2706 102.96 95.2606 102.96 94.0006 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
164.04 145.881 mo
162.79 145.881 161.78 144.861 161.78 143.611 cv
161.78 142.361 162.79 141.341 164.04 141.341 cv
165.3 141.341 166.31 142.361 166.31 143.611 cv
166.31 144.861 165.3 145.881 164.04 145.881 cv
.940124 .884123 .866941 .779416 cmyk
f
161.78 143.611 mo
161.78 142.361 162.79 141.341 164.04 141.341 cv
165.3 141.341 166.31 142.361 166.31 143.611 cv
166.31 144.861 165.3 145.881 164.04 145.881 cv
162.79 145.881 161.78 144.861 161.78 143.611 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
49.5198 85.5005 mo
48.2698 85.5005 47.2598 84.4806 47.2598 83.2306 cv
47.2598 81.9806 48.2698 80.9606 49.5198 80.9606 cv
50.7798 80.9606 51.7898 81.9806 51.7898 83.2306 cv
51.7898 84.4806 50.7798 85.5005 49.5198 85.5005 cv
.940124 .884123 .866941 .779416 cmyk
f
47.2598 83.2306 mo
47.2598 81.9806 48.2698 80.9606 49.5198 80.9606 cv
50.7798 80.9606 51.7898 81.9806 51.7898 83.2306 cv
51.7898 84.4806 50.7798 85.5006 49.5198 85.5006 cv
48.2698 85.5006 47.2598 84.4806 47.2598 83.2306 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
123.58 125.831 mo
123.204 125.831 li
123.205 124.363 124.394 123.188 125.85 123.185 cv
127.306 123.188 128.495 124.363 128.495 125.831 cv
128.494 127.29 127.306 128.466 125.85 128.466 cv
124.394 128.466 123.205 127.29 123.204 125.831 cv
123.58 125.831 li
123.955 125.831 li
123.957 126.871 124.806 127.713 125.85 127.715 cv
126.894 127.713 127.743 126.871 127.744 125.831 cv
127.743 124.778 126.894 123.936 125.85 123.936 cv
124.806 123.936 123.957 124.778 123.955 125.831 cv
123.58 125.831 li
f
193.1 47.5206 mo
191.85 47.5206 190.83 46.5006 190.83 45.2506 cv
190.83 44.0006 191.85 42.9805 193.1 42.9805 cv
194.35 42.9805 195.37 44.0006 195.37 45.2506 cv
195.37 46.5006 194.35 47.5206 193.1 47.5206 cv
.909422 .862669 .868009 .769924 cmyk
f
190.83 45.2506 mo
190.83 44.0006 191.85 42.9806 193.1 42.9806 cv
194.35 42.9806 195.37 44.0006 195.37 45.2506 cv
195.37 46.5006 194.35 47.5206 193.1 47.5206 cv
191.85 47.5206 190.83 46.5006 190.83 45.2506 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
267.65 95.4206 mo
266.4 95.4206 265.38 94.4106 265.38 93.1507 cv
265.38 91.9007 266.4 90.8905 267.65 90.8905 cv
268.9 90.8905 269.92 91.9007 269.92 93.1507 cv
269.92 94.4106 268.9 95.4206 267.65 95.4206 cv
.909422 .862669 .868009 .769924 cmyk
f
265.38 93.1506 mo
265.38 91.9006 266.4 90.8906 267.65 90.8906 cv
268.9 90.8906 269.92 91.9006 269.92 93.1506 cv
269.92 94.4106 268.9 95.4206 267.65 95.4206 cv
266.4 95.4206 265.38 94.4106 265.38 93.1506 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
295.93 150.351 mo
294.68 150.351 293.66 149.331 293.66 148.081 cv
293.66 146.831 294.68 145.811 295.93 145.811 cv
297.18 145.811 298.2 146.831 298.2 148.081 cv
298.2 149.331 297.18 150.351 295.93 150.351 cv
.909422 .862669 .868009 .769924 cmyk
f
293.66 148.081 mo
293.66 146.831 294.68 145.811 295.93 145.811 cv
297.18 145.811 298.2 146.831 298.2 148.081 cv
298.2 149.331 297.18 150.351 295.93 150.351 cv
294.68 150.351 293.66 149.331 293.66 148.081 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
278.14 108.571 mo
276.89 108.571 275.87 107.551 275.87 106.301 cv
275.87 105.051 276.89 104.031 278.14 104.031 cv
279.39 104.031 280.41 105.051 280.41 106.301 cv
280.41 107.551 279.39 108.571 278.14 108.571 cv
.909422 .862669 .868009 .769924 cmyk
f
275.87 106.301 mo
275.87 105.051 276.89 104.031 278.14 104.031 cv
279.39 104.031 280.41 105.051 280.41 106.301 cv
280.41 107.551 279.39 108.571 278.14 108.571 cv
276.89 108.571 275.87 107.551 275.87 106.301 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
152.28 175.071 mo
151.03 175.071 150.01 174.061 150.01 172.811 cv
150.01 171.551 151.03 170.541 152.28 170.541 cv
153.53 170.541 154.55 171.551 154.55 172.811 cv
154.55 174.061 153.53 175.071 152.28 175.071 cv
.909422 .862669 .868009 .769924 cmyk
f
150.01 172.811 mo
150.01 171.551 151.03 170.541 152.28 170.541 cv
153.53 170.541 154.55 171.551 154.55 172.811 cv
154.55 174.061 153.53 175.071 152.28 175.071 cv
151.03 175.071 150.01 174.061 150.01 172.811 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.19 152.401 mo
179.94 152.401 178.93 151.381 178.93 150.131 cv
178.93 148.881 179.94 147.861 181.19 147.861 cv
182.45 147.861 183.46 148.881 183.46 150.131 cv
183.46 151.381 182.45 152.401 181.19 152.401 cv
.940124 .884123 .866941 .779416 cmyk
f
178.93 150.131 mo
178.93 148.881 179.94 147.861 181.19 147.861 cv
182.45 147.861 183.46 148.881 183.46 150.131 cv
183.46 151.381 182.45 152.401 181.19 152.401 cv
179.94 152.401 178.93 151.381 178.93 150.131 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
266.23 76.4306 mo
264.98 76.4306 263.97 75.4106 263.97 74.1606 cv
263.97 72.9106 264.98 71.8905 266.23 71.8905 cv
267.49 71.8905 268.5 72.9106 268.5 74.1606 cv
268.5 75.4106 267.49 76.4306 266.23 76.4306 cv
.909422 .862669 .868009 .769924 cmyk
f
263.97 74.1606 mo
263.97 72.9106 264.98 71.8906 266.23 71.8906 cv
267.49 71.8906 268.5 72.9106 268.5 74.1606 cv
268.5 75.4106 267.49 76.4306 266.23 76.4306 cv
264.98 76.4306 263.97 75.4106 263.97 74.1606 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
230.23 73.0306 mo
228.98 73.0306 227.97 72.0106 227.97 70.7606 cv
227.97 69.5105 228.98 68.4906 230.23 68.4906 cv
231.49 68.4906 232.5 69.5105 232.5 70.7606 cv
232.5 72.0106 231.49 73.0306 230.23 73.0306 cv
.909422 .862669 .868009 .769924 cmyk
f
227.97 70.7606 mo
227.97 69.5106 228.98 68.4906 230.23 68.4906 cv
231.49 68.4906 232.5 69.5106 232.5 70.7606 cv
232.5 72.0106 231.49 73.0306 230.23 73.0306 cv
228.98 73.0306 227.97 72.0106 227.97 70.7606 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
293.73 70.1906 mo
292.48 70.1906 291.46 69.1806 291.46 67.9306 cv
291.46 66.6706 292.48 65.6606 293.73 65.6606 cv
294.98 65.6606 296 66.6706 296 67.9306 cv
296 69.1806 294.98 70.1906 293.73 70.1906 cv
.909422 .862669 .868009 .769924 cmyk
f
291.46 67.9306 mo
291.46 66.6706 292.48 65.6606 293.73 65.6606 cv
294.98 65.6606 296 66.6706 296 67.9306 cv
296 69.1806 294.98 70.1906 293.73 70.1906 cv
292.48 70.1906 291.46 69.1806 291.46 67.9306 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
275.3 39.0106 mo
274.05 39.0106 273.04 38.0006 273.04 36.7406 cv
273.04 35.4906 274.05 34.4806 275.3 34.4806 cv
276.56 34.4806 277.57 35.4906 277.57 36.7406 cv
277.57 38.0006 276.56 39.0106 275.3 39.0106 cv
.909422 .862669 .868009 .769924 cmyk
f
273.04 36.7406 mo
273.04 35.4906 274.05 34.4806 275.3 34.4806 cv
276.56 34.4806 277.57 35.4906 277.57 36.7406 cv
277.57 38.0006 276.56 39.0106 275.3 39.0106 cv
274.05 39.0106 273.04 38.0006 273.04 36.7406 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
275.3 138.791 mo
274.05 138.791 273.04 137.781 273.04 136.521 cv
273.04 135.271 274.05 134.261 275.3 134.261 cv
276.56 134.261 277.57 135.271 277.57 136.521 cv
277.57 137.781 276.56 138.791 275.3 138.791 cv
.909422 .862669 .868009 .769924 cmyk
f
273.04 136.521 mo
273.04 135.271 274.05 134.261 275.3 134.261 cv
276.56 134.261 277.57 135.271 277.57 136.521 cv
277.57 137.781 276.56 138.791 275.3 138.791 cv
274.05 138.791 273.04 137.781 273.04 136.521 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
199.16 108.195 mo
198.118 108.193 197.267 107.342 197.265 106.301 cv
197.267 105.259 198.118 104.408 199.16 104.406 cv
200.201 104.408 201.053 105.259 201.054 106.301 cv
201.053 107.342 200.201 108.193 199.16 108.195 cv
.92517 .879728 .890196 .799985 cmyk
f
199.16 108.571 mo
197.91 108.571 196.89 107.551 196.89 106.301 cv
196.89 106.301 li
197.265 106.301 li
196.89 106.301 li
196.89 105.051 197.91 104.031 199.16 104.031 cv
200.41 104.031 201.43 105.051 201.43 106.301 cv
201.43 107.551 200.41 108.571 199.16 108.571 cv
197.265 106.301 mo
197.267 107.342 198.118 108.193 199.16 108.195 cv
200.201 108.193 201.053 107.342 201.054 106.301 cv
201.054 106.301 li
201.053 105.259 200.201 104.408 199.16 104.406 cv
198.118 104.408 197.267 105.259 197.265 106.301 cv
197.265 106.301 li
f
196.89 106.301 mo
196.89 105.051 197.91 104.031 199.16 104.031 cv
200.41 104.031 201.43 105.051 201.43 106.301 cv
201.43 107.551 200.41 108.571 199.16 108.571 cv
197.91 108.571 196.89 107.551 196.89 106.301 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
204.72 125.471 mo
203.47 125.471 202.45 124.451 202.45 123.201 cv
202.45 121.951 203.47 120.931 204.72 120.931 cv
205.97 120.931 206.99 121.951 206.99 123.201 cv
206.99 124.451 205.97 125.471 204.72 125.471 cv
.940124 .884123 .866941 .779416 cmyk
f
202.45 123.201 mo
202.45 121.951 203.47 120.931 204.72 120.931 cv
205.97 120.931 206.99 121.951 206.99 123.201 cv
206.99 124.451 205.97 125.471 204.72 125.471 cv
203.47 125.471 202.45 124.451 202.45 123.201 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
117.41 165.721 mo
116.16 165.721 115.15 164.711 115.15 163.451 cv
115.15 162.201 116.16 161.191 117.41 161.191 cv
118.67 161.191 119.68 162.201 119.68 163.451 cv
119.68 164.711 118.67 165.721 117.41 165.721 cv
.909422 .862669 .868009 .769924 cmyk
f
115.15 163.451 mo
115.15 162.201 116.16 161.191 117.41 161.191 cv
118.67 161.191 119.68 162.201 119.68 163.451 cv
119.68 164.711 118.67 165.721 117.41 165.721 cv
116.16 165.721 115.15 164.711 115.15 163.451 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
95.2997 139.181 mo
94.0499 139.181 93.0397 138.171 93.0397 136.911 cv
93.0397 135.661 94.0499 134.651 95.2997 134.651 cv
96.5598 134.651 97.5698 135.661 97.5698 136.911 cv
97.5698 138.171 96.5598 139.181 95.2997 139.181 cv
.909422 .862669 .868009 .769924 cmyk
f
93.0398 136.911 mo
93.0398 135.661 94.0498 134.651 95.2998 134.651 cv
96.5598 134.651 97.5698 135.661 97.5698 136.911 cv
97.5698 138.171 96.5598 139.181 95.2998 139.181 cv
94.0498 139.181 93.0398 138.171 93.0398 136.911 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
15.9298 142.191 mo
14.6798 142.191 13.6698 141.181 13.6698 139.931 cv
13.6698 138.671 14.6798 137.661 15.9298 137.661 cv
17.1897 137.661 18.1998 138.671 18.1998 139.931 cv
18.1998 141.181 17.1897 142.191 15.9298 142.191 cv
.909422 .862669 .868009 .769924 cmyk
f
13.6698 139.931 mo
13.6698 138.671 14.6798 137.661 15.9298 137.661 cv
17.1898 137.661 18.1998 138.671 18.1998 139.931 cv
18.1998 141.181 17.1898 142.191 15.9298 142.191 cv
14.6798 142.191 13.6698 141.181 13.6698 139.931 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
32.3698 156.371 mo
31.1197 156.371 30.1098 155.351 30.1098 154.101 cv
30.1098 152.851 31.1197 151.831 32.3698 151.831 cv
33.6298 151.831 34.6398 152.851 34.6398 154.101 cv
34.6398 155.351 33.6298 156.371 32.3698 156.371 cv
.909422 .862669 .868009 .769924 cmyk
f
30.1098 154.101 mo
30.1098 152.851 31.1198 151.831 32.3698 151.831 cv
33.6298 151.831 34.6398 152.851 34.6398 154.101 cv
34.6398 155.351 33.6298 156.371 32.3698 156.371 cv
31.1198 156.371 30.1098 155.351 30.1098 154.101 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
72.6299 163.451 mo
71.3698 163.451 70.3598 162.441 70.3598 161.191 cv
70.3598 159.931 71.3698 158.921 72.6299 158.921 cv
73.8797 158.921 74.8898 159.931 74.8898 161.191 cv
74.8898 162.441 73.8797 163.451 72.6299 163.451 cv
.909422 .862669 .868009 .769924 cmyk
f
70.3598 161.191 mo
70.3598 159.931 71.3698 158.921 72.6298 158.921 cv
73.8798 158.921 74.8898 159.931 74.8898 161.191 cv
74.8898 162.441 73.8798 163.451 72.6298 163.451 cv
71.3698 163.451 70.3598 162.441 70.3598 161.191 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
46.5498 142.191 mo
45.2998 142.191 44.2798 141.181 44.2798 139.931 cv
44.2798 138.671 45.2998 137.661 46.5498 137.661 cv
47.7998 137.661 48.8198 138.671 48.8198 139.931 cv
48.8198 141.181 47.7998 142.191 46.5498 142.191 cv
.909422 .862669 .868009 .769924 cmyk
f
44.2798 139.931 mo
44.2798 138.671 45.2998 137.661 46.5498 137.661 cv
47.7998 137.661 48.8198 138.671 48.8198 139.931 cv
48.8198 141.181 47.7998 142.191 46.5498 142.191 cv
45.2998 142.191 44.2798 141.181 44.2798 139.931 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
15.9298 101.941 mo
14.6798 101.941 13.6698 100.931 13.6698 99.6705 cv
13.6698 98.4205 14.6798 97.4106 15.9298 97.4106 cv
17.1897 97.4106 18.1998 98.4205 18.1998 99.6705 cv
18.1998 100.931 17.1897 101.941 15.9298 101.941 cv
.909422 .862669 .868009 .769924 cmyk
f
13.6698 99.6706 mo
13.6698 98.4206 14.6798 97.4106 15.9298 97.4106 cv
17.1898 97.4106 18.1998 98.4206 18.1998 99.6706 cv
18.1998 100.931 17.1898 101.941 15.9298 101.941 cv
14.6798 101.941 13.6698 100.931 13.6698 99.6706 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
77.1597 57.1506 mo
75.9097 57.1506 74.8898 56.1406 74.8898 54.8906 cv
74.8898 53.6305 75.9097 52.6206 77.1597 52.6206 cv
78.4098 52.6206 79.4298 53.6305 79.4298 54.8906 cv
79.4298 56.1406 78.4098 57.1506 77.1597 57.1506 cv
.940124 .884123 .866941 .779416 cmyk
f
74.8898 54.8906 mo
74.8898 53.6306 75.9098 52.6206 77.1598 52.6206 cv
78.4098 52.6206 79.4298 53.6306 79.4298 54.8906 cv
79.4298 56.1406 78.4098 57.1506 77.1598 57.1506 cv
75.9098 57.1506 74.8898 56.1406 74.8898 54.8906 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
34.6398 54.6005 mo
33.3898 54.6005 32.3698 53.5907 32.3698 52.3306 cv
32.3698 51.0806 33.3898 50.0706 34.6398 50.0706 cv
35.8898 50.0706 36.9098 51.0806 36.9098 52.3306 cv
36.9098 53.5907 35.8898 54.6005 34.6398 54.6005 cv
.909422 .862669 .868009 .769924 cmyk
f
32.3698 52.3306 mo
32.3698 51.0806 33.3898 50.0706 34.6398 50.0706 cv
35.8898 50.0706 36.9098 51.0806 36.9098 52.3306 cv
36.9098 53.5906 35.8898 54.6006 34.6398 54.6006 cv
33.3898 54.6006 32.3698 53.5906 32.3698 52.3306 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
125.85 127.715 mo
124.806 127.713 123.957 126.871 123.955 125.831 cv
123.957 124.778 124.806 123.936 125.85 123.936 cv
126.894 123.936 127.743 124.778 127.744 125.831 cv
127.743 126.871 126.894 127.713 125.85 127.715 cv
.92517 .879728 .890196 .799985 cmyk
f
125.85 128.091 mo
124.6 128.091 123.58 127.081 123.58 125.831 cv
123.58 125.831 li
123.955 125.831 li
123.58 125.831 li
123.58 124.571 124.6 123.561 125.85 123.561 cv
127.1 123.561 128.12 124.571 128.12 125.831 cv
128.12 127.081 127.1 128.091 125.85 128.091 cv
123.955 125.831 mo
123.957 126.871 124.806 127.713 125.85 127.715 cv
126.894 127.713 127.743 126.871 127.744 125.831 cv
127.744 125.831 li
127.743 124.778 126.894 123.936 125.85 123.936 cv
124.806 123.936 123.957 124.778 123.955 125.831 cv
123.955 125.831 li
f
123.58 125.831 mo
123.58 124.571 124.6 123.561 125.85 123.561 cv
127.1 123.561 128.12 124.571 128.12 125.831 cv
128.12 127.081 127.1 128.091 125.85 128.091 cv
124.6 128.091 123.58 127.081 123.58 125.831 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
169.29 125.471 mo
168.04 125.471 167.02 124.451 167.02 123.201 cv
167.02 121.951 168.04 120.931 169.29 120.931 cv
170.54 120.931 171.56 121.951 171.56 123.201 cv
171.56 124.451 170.54 125.471 169.29 125.471 cv
.940124 .884123 .866941 .779416 cmyk
f
167.02 123.201 mo
167.02 121.951 168.04 120.931 169.29 120.931 cv
170.54 120.931 171.56 121.951 171.56 123.201 cv
171.56 124.451 170.54 125.471 169.29 125.471 cv
168.04 125.471 167.02 124.451 167.02 123.201 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
141.33 71.1506 mo
140.08 71.1506 139.07 70.1406 139.07 68.8805 cv
139.07 67.6305 140.08 66.6207 141.33 66.6207 cv
142.59 66.6207 143.6 67.6305 143.6 68.8805 cv
143.6 70.1406 142.59 71.1506 141.33 71.1506 cv
.909422 .862669 .868009 .769924 cmyk
f
139.07 68.8806 mo
139.07 67.6306 140.08 66.6206 141.33 66.6206 cv
142.59 66.6206 143.6 67.6306 143.6 68.8806 cv
143.6 70.1406 142.59 71.1506 141.33 71.1506 cv
140.08 71.1506 139.07 70.1406 139.07 68.8806 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
192.75 122.571 mo
191.5 122.571 190.48 121.551 190.48 120.301 cv
190.48 119.051 191.5 118.031 192.75 118.031 cv
194 118.031 195.02 119.051 195.02 120.301 cv
195.02 121.551 194 122.571 192.75 122.571 cv
.940124 .884123 .866941 .779416 cmyk
f
190.48 120.301 mo
190.48 119.051 191.5 118.031 192.75 118.031 cv
194 118.031 195.02 119.051 195.02 120.301 cv
195.02 121.551 194 122.571 192.75 122.571 cv
191.5 122.571 190.48 121.551 190.48 120.301 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
228.53 92.5906 mo
227.28 92.5906 226.26 91.5706 226.26 90.3206 cv
226.26 89.0706 227.28 88.0506 228.53 88.0506 cv
229.78 88.0506 230.8 89.0706 230.8 90.3206 cv
230.8 91.5706 229.78 92.5906 228.53 92.5906 cv
.909422 .862669 .868009 .769924 cmyk
f
226.26 90.3206 mo
226.26 89.0706 227.28 88.0506 228.53 88.0506 cv
229.78 88.0506 230.8 89.0706 230.8 90.3206 cv
230.8 91.5706 229.78 92.5906 228.53 92.5906 cv
227.28 92.5906 226.26 91.5706 226.26 90.3206 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
133.86 31.0706 mo
132.6 31.0706 131.59 30.0607 131.59 28.8106 cv
131.59 27.5506 132.6 26.5406 133.86 26.5406 cv
135.11 26.5406 136.12 27.5506 136.12 28.8106 cv
136.12 30.0607 135.11 31.0706 133.86 31.0706 cv
.909422 .862669 .868009 .769924 cmyk
f
131.59 28.8106 mo
131.59 27.5506 132.6 26.5406 133.86 26.5406 cv
135.11 26.5406 136.12 27.5506 136.12 28.8106 cv
136.12 30.0606 135.11 31.0706 133.86 31.0706 cv
132.6 31.0706 131.59 30.0606 131.59 28.8106 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
162.2 33.3407 mo
160.95 33.3407 159.93 32.3306 159.93 31.0706 cv
159.93 29.8206 160.95 28.8106 162.2 28.8106 cv
163.45 28.8106 164.47 29.8206 164.47 31.0706 cv
164.47 32.3306 163.45 33.3407 162.2 33.3407 cv
.909422 .862669 .868009 .769924 cmyk
f
159.93 31.0706 mo
159.93 29.8206 160.95 28.8106 162.2 28.8106 cv
163.45 28.8106 164.47 29.8206 164.47 31.0706 cv
164.47 32.3306 163.45 33.3406 162.2 33.3406 cv
160.95 33.3406 159.93 32.3306 159.93 31.0706 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
216.63 28.8106 mo
215.37 28.8106 214.36 27.7906 214.36 26.5406 cv
214.36 25.2906 215.37 24.2706 216.63 24.2706 cv
217.88 24.2706 218.89 25.2906 218.89 26.5406 cv
218.89 27.7906 217.88 28.8106 216.63 28.8106 cv
.909422 .862669 .868009 .769924 cmyk
f
214.36 26.5406 mo
214.36 25.2906 215.37 24.2706 216.63 24.2706 cv
217.88 24.2706 218.89 25.2906 218.89 26.5406 cv
218.89 27.7906 217.88 28.8106 216.63 28.8106 cv
215.37 28.8106 214.36 27.7906 214.36 26.5406 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
184.6 73.5906 mo
183.34 73.5906 182.33 72.5806 182.33 71.3306 cv
182.33 70.0706 183.34 69.0606 184.6 69.0606 cv
185.85 69.0606 186.86 70.0706 186.86 71.3306 cv
186.86 72.5806 185.85 73.5906 184.6 73.5906 cv
.909422 .862669 .868009 .769924 cmyk
f
182.33 71.3306 mo
182.33 70.0706 183.34 69.0606 184.6 69.0606 cv
185.85 69.0606 186.86 70.0706 186.86 71.3306 cv
186.86 72.5806 185.85 73.5906 184.6 73.5906 cv
183.34 73.5906 182.33 72.5806 182.33 71.3306 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
252.06 22.0006 mo
250.81 22.0006 249.79 20.9906 249.79 19.7406 cv
249.79 18.4806 250.81 17.4706 252.06 17.4706 cv
253.31 17.4706 254.33 18.4806 254.33 19.7406 cv
254.33 20.9906 253.31 22.0006 252.06 22.0006 cv
.909422 .862669 .868009 .769924 cmyk
f
249.79 19.7406 mo
249.79 18.4806 250.81 17.4706 252.06 17.4706 cv
253.31 17.4706 254.33 18.4806 254.33 19.7406 cv
254.33 20.9906 253.31 22.0006 252.06 22.0006 cv
250.81 22.0006 249.79 20.9906 249.79 19.7406 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
193.1 16.3305 mo
191.85 16.3305 190.83 15.3206 190.83 14.0706 cv
190.83 12.8106 191.85 11.8006 193.1 11.8006 cv
194.35 11.8006 195.37 12.8106 195.37 14.0706 cv
195.37 15.3206 194.35 16.3305 193.1 16.3305 cv
.909422 .862669 .868009 .769924 cmyk
f
190.83 14.0706 mo
190.83 12.8106 191.85 11.8006 193.1 11.8006 cv
194.35 11.8006 195.37 12.8106 195.37 14.0706 cv
195.37 15.3206 194.35 16.3306 193.1 16.3306 cv
191.85 16.3306 190.83 15.3206 190.83 14.0706 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
172.69 91.1706 mo
171.44 91.1706 170.42 90.1506 170.42 88.9005 cv
170.42 87.6507 171.44 86.6305 172.69 86.6305 cv
173.94 86.6305 174.96 87.6507 174.96 88.9005 cv
174.96 90.1506 173.94 91.1706 172.69 91.1706 cv
.909422 .862669 .868009 .769924 cmyk
f
170.42 88.9006 mo
170.42 87.6506 171.44 86.6306 172.69 86.6306 cv
173.94 86.6306 174.96 87.6506 174.96 88.9006 cv
174.96 90.1506 173.94 91.1706 172.69 91.1706 cv
171.44 91.1706 170.42 90.1506 170.42 88.9006 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
76.3098 121.781 mo
75.0598 121.781 74.0397 120.771 74.0397 119.521 cv
74.0397 118.261 75.0598 117.251 76.3098 117.251 cv
77.5598 117.251 78.5798 118.261 78.5798 119.521 cv
78.5798 120.771 77.5598 121.781 76.3098 121.781 cv
.909422 .862669 .868009 .769924 cmyk
f
74.0398 119.521 mo
74.0398 118.261 75.0598 117.251 76.3098 117.251 cv
77.5598 117.251 78.5798 118.261 78.5798 119.521 cv
78.5798 120.771 77.5598 121.781 76.3098 121.781 cv
75.0598 121.781 74.0398 120.771 74.0398 119.521 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
227.38 157.201 mo
226.13 157.201 225.12 156.191 225.12 154.931 cv
225.12 153.681 226.13 152.671 227.38 152.671 cv
228.64 152.671 229.65 153.681 229.65 154.931 cv
229.65 156.191 228.64 157.201 227.38 157.201 cv
.909422 .862669 .868009 .769924 cmyk
f
225.12 154.931 mo
225.12 153.681 226.13 152.671 227.38 152.671 cv
228.64 152.671 229.65 153.681 229.65 154.931 cv
229.65 156.191 228.64 157.201 227.38 157.201 cv
226.13 157.201 225.12 156.191 225.12 154.931 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
203.92 162.891 mo
202.67 162.891 201.66 161.871 201.66 160.621 cv
201.66 159.371 202.67 158.351 203.92 158.351 cv
205.18 158.351 206.19 159.371 206.19 160.621 cv
206.19 161.871 205.18 162.891 203.92 162.891 cv
.909422 .862669 .868009 .769924 cmyk
f
201.66 160.621 mo
201.66 159.371 202.67 158.351 203.92 158.351 cv
205.18 158.351 206.19 159.371 206.19 160.621 cv
206.19 161.871 205.18 162.891 203.92 162.891 cv
202.67 162.891 201.66 161.871 201.66 160.621 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
131.73 104.211 mo
130.48 104.211 129.46 103.191 129.46 101.941 cv
129.46 100.691 130.48 99.6705 131.73 99.6705 cv
132.98 99.6705 134 100.691 134 101.941 cv
134 103.191 132.98 104.211 131.73 104.211 cv
.909422 .862669 .868009 .769924 cmyk
f
129.46 101.941 mo
129.46 100.691 130.48 99.6706 131.73 99.6706 cv
132.98 99.6706 134 100.691 134 101.941 cv
134 103.191 132.98 104.211 131.73 104.211 cv
130.48 104.211 129.46 103.191 129.46 101.941 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
29 <001C60D8A8C9B7A73DB9886BE1A989933897A9B23DB10D0C2924ED0D8C8C
D07FE6AE239EEF77BE0C00C089BBE2ACE53696D63106A1281D76C8C89B0202F2
DA231D779A2DEDE39605269144D581865A3621FC11B5AB2DC0DCFD879299D920
942E0AEC9D4CD66BE99B945ECD5E8FA4794ACF81308F49DDDAD01755F0EE782B
BDF4AFFDCE9A> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
325.55 170.971 mo
(\000\035)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
325.55 170.971 mo
(\000\035) false chp
.34286 lw
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
331.55 170.971 mo
(\000\003)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
331.55 170.971 mo
(\000\003) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
337.64 170.971 mo
(\0006)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
337.64 170.971 mo
(\0006) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
343.64 170.971 mo
(\000H)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
343.64 170.971 mo
(\000H) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
81 <001C60D8A8C9B7A73DB97D2EA733FEF9D2030029A5B2CF3B73FD3A017E40
3C7A7ECCD10D84715DED131012A8B85BC71DE184A412A8CD7387157A3BD821CF
216B6F38127FBEE1EC9BD373B8D55F9BA6C4D9B25B5D83E7051052FD5834DE62
64855AD7B856C0588CD8AAD6807600877EC81A4A840D80A8C503E2914E6D14B4
031AC23525AD7F93F7FF3E95FADE0D273A4369ED1B421A1A11CCC3C142CC5573
FD51D096FE468891B54B510E9053DB6AED41C3A27C9DD1429558EC8F6D3FACD0
3EB4FF5C6777> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
349.64 170.971 mo
(\000Q)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
349.64 170.971 mo
(\000Q) false chp
@
%ADOBeginSubsetFont: MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
86 <001C60D8A8C9B7A73DB923D5A7E1A048C12FD6EAA91CC25839041CFEAE1A
A7C202C7ED1530CE3FECBA6BDF8AAF3E91890E75110F8E216E2B37AA16BB08AE
E6700BEB5033B16635721DE92C05AF681BA202B72B2068DEAC474A1E638C3DAC
266B862E03C96D35D72068696D7D6C6381DC037E8BBAE247FF9F47D2E4538226
51D894E0874681F71FDA6448AB38D148952B5A81C467D015EC59AE9EE1530FE5
813CA13FD4B0E2772EDD241FE4D317D8CFB23840EA92D4E1CAE9D1D6E6E2E010
B23187FD71E43A9D5BD10376E8BCCDC46ED2D8C8FC7FB046A417116698C16A78
8D2397C5B42D1EE2ED8834D09DD9ED9942AB42DD8CA2D1C8F65F822421FB4EB6> |
!
end
end end
%ADOEndSubsetFont
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
355.64 170.971 mo
(\000V)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
355.64 170.971 mo
(\000V) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
361.64 170.971 mo
(\000R)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
361.64 170.971 mo
(\000R) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
367.64 170.971 mo
(\000U)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
367.64 170.971 mo
(\000U) false chp
@
310.88 166.931 mo
310.88 164.581 312.78 162.671 315.13 162.671 cv
317.48 162.671 319.38 164.581 319.38 166.931 cv
319.38 169.271 317.48 171.181 315.13 171.181 cv
312.78 171.181 310.88 169.271 310.88 166.931 cv
cp
ef
.75075 lw
310.88 166.931 mo
310.88 164.581 312.78 162.671 315.13 162.671 cv
317.48 162.671 319.38 164.581 319.38 166.931 cv
319.38 169.271 317.48 171.181 315.13 171.181 cv
312.78 171.181 310.88 169.271 310.88 166.931 cv
cp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
325.5 150.821 mo
(\000\035)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
325.5 150.821 mo
(\000\035) false chp
.34286 lw
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
331.5 150.821 mo
(\000\003)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
331.5 150.821 mo
(\000\003) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
337.59 150.821 mo
(\0006)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
337.59 150.821 mo
(\0006) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
343.59 150.821 mo
(\000R)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
343.59 150.821 mo
(\000R) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
349.59 150.821 mo
(\000X)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
349.59 150.821 mo
(\000X) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
355.59 150.821 mo
(\000U)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
355.59 150.821 mo
(\000U) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
361.59 150.821 mo
(\000F)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
361.59 150.821 mo
(\000F) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
367.59 150.821 mo
(\000H)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
367.59 150.821 mo
(\000H) false chp
@
320.28 149.631 mo
315.13 139.861 li
309.98 149.631 li
320.28 149.631 li
cp
0 1 1 0 cmyk
ef
.75075 lw
320.28 149.631 mo
315.13 139.861 li
309.98 149.631 li
320.28 149.631 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
188.26 133.261 mo
183.11 123.491 li
177.96 133.261 li
188.26 133.261 li
cp
0 1 1 0 cmyk
ef
188.26 133.261 mo
183.11 123.491 li
177.96 133.261 li
188.26 133.261 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
72.2498 71.6806 mo
67.0998 61.9106 li
61.9498 71.6806 li
72.2498 71.6806 li
cp
0 1 1 0 cmyk
ef
72.2498 71.6806 mo
67.0998 61.9106 li
61.9498 71.6806 li
72.2498 71.6806 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
174.92 145.151 mo
(\0006)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
174.92 145.151 mo
(\0006) false chp
.34286 lw
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
180.92 145.151 mo
(\000R)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
180.92 145.151 mo
(\000R) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
186.92 145.151 mo
(\000X)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
186.92 145.151 mo
(\000X) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
192.92 145.151 mo
(\000U)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
192.92 145.151 mo
(\000U) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
198.92 145.151 mo
(\000F)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
198.92 145.151 mo
(\000F) false chp
@
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
204.92 145.151 mo
(\000H)sh
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
204.92 145.151 mo
(\000H) false chp
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H uf
/MQCFAM+#e5#ae#8b#e4#bd#93-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
